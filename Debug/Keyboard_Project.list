
Keyboard_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800709c  0800709c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  0800709c  0800709c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800709c  0800709c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080070a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000158  080071fc  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  080071fc  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f39f  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002658  00000000  00000000  0002f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00032570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019194  00000000  00000000  00032e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5b8  00000000  00000000  0004bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000849b4  00000000  00000000  0005757c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000dbfac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08007018 	.word	0x08007018

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08007018 	.word	0x08007018

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa64 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f91a 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f972 	bl	8000440 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fb76 	bl	800684c <MX_USB_DEVICE_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8000160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000164:	4885      	ldr	r0, [pc, #532]	; (800037c <main+0x230>)
 8000166:	f000 fd45 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d139      	bne.n	80001e4 <main+0x98>
 8000170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000174:	4881      	ldr	r0, [pc, #516]	; (800037c <main+0x230>)
 8000176:	f000 fd3d 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	2b01      	cmp	r3, #1
 800017e:	d131      	bne.n	80001e4 <main+0x98>
 8000180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000184:	487d      	ldr	r0, [pc, #500]	; (800037c <main+0x230>)
 8000186:	f000 fd35 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d129      	bne.n	80001e4 <main+0x98>
 8000190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000194:	4879      	ldr	r0, [pc, #484]	; (800037c <main+0x230>)
 8000196:	f000 fd2d 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b01      	cmp	r3, #1
 800019e:	d121      	bne.n	80001e4 <main+0x98>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	4876      	ldr	r0, [pc, #472]	; (8000380 <main+0x234>)
 80001a8:	f000 fd3b 	bl	8000c22 <HAL_GPIO_WritePin>
		  	  keyboardhid.KEYCODE1 = 79; // right key
 80001ac:	4b75      	ldr	r3, [pc, #468]	; (8000384 <main+0x238>)
 80001ae:	224f      	movs	r2, #79	; 0x4f
 80001b0:	709a      	strb	r2, [r3, #2]
		 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid)); // envia o report criado
 80001b2:	2208      	movs	r2, #8
 80001b4:	4973      	ldr	r1, [pc, #460]	; (8000384 <main+0x238>)
 80001b6:	4874      	ldr	r0, [pc, #464]	; (8000388 <main+0x23c>)
 80001b8:	f005 fa66 	bl	8005688 <USBD_HID_SendReport>
		 	  HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	; 0x32
 80001be:	f000 fa8f 	bl	80006e0 <HAL_Delay>
		 	  keyboardhid.KEYCODE1 = 0x00;// nenhuma tecla pressionada, caso soltar a tecla
 80001c2:	4b70      	ldr	r3, [pc, #448]	; (8000384 <main+0x238>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	709a      	strb	r2, [r3, #2]
		 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80001c8:	2208      	movs	r2, #8
 80001ca:	496e      	ldr	r1, [pc, #440]	; (8000384 <main+0x238>)
 80001cc:	486e      	ldr	r0, [pc, #440]	; (8000388 <main+0x23c>)
 80001ce:	f005 fa5b 	bl	8005688 <USBD_HID_SendReport>
		 	  HAL_Delay(10);
 80001d2:	200a      	movs	r0, #10
 80001d4:	f000 fa84 	bl	80006e0 <HAL_Delay>
		 	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001de:	4868      	ldr	r0, [pc, #416]	; (8000380 <main+0x234>)
 80001e0:	f000 fd1f 	bl	8000c22 <HAL_GPIO_WritePin>

	  }

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 80001e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e8:	4864      	ldr	r0, [pc, #400]	; (800037c <main+0x230>)
 80001ea:	f000 fd03 	bl	8000bf4 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d139      	bne.n	8000268 <main+0x11c>
 80001f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f8:	4860      	ldr	r0, [pc, #384]	; (800037c <main+0x230>)
 80001fa:	f000 fcfb 	bl	8000bf4 <HAL_GPIO_ReadPin>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d131      	bne.n	8000268 <main+0x11c>
 8000204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000208:	485c      	ldr	r0, [pc, #368]	; (800037c <main+0x230>)
 800020a:	f000 fcf3 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	2b01      	cmp	r3, #1
 8000212:	d129      	bne.n	8000268 <main+0x11c>
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4858      	ldr	r0, [pc, #352]	; (800037c <main+0x230>)
 800021a:	f000 fceb 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	2b01      	cmp	r3, #1
 8000222:	d121      	bne.n	8000268 <main+0x11c>
	  	  keyboardhid.KEYCODE1 = 80; // left key
 8000224:	4b57      	ldr	r3, [pc, #348]	; (8000384 <main+0x238>)
 8000226:	2250      	movs	r2, #80	; 0x50
 8000228:	709a      	strb	r2, [r3, #2]
	 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid)); // envia o report criado
 800022a:	2208      	movs	r2, #8
 800022c:	4955      	ldr	r1, [pc, #340]	; (8000384 <main+0x238>)
 800022e:	4856      	ldr	r0, [pc, #344]	; (8000388 <main+0x23c>)
 8000230:	f005 fa2a 	bl	8005688 <USBD_HID_SendReport>

	 	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023a:	4851      	ldr	r0, [pc, #324]	; (8000380 <main+0x234>)
 800023c:	f000 fcf1 	bl	8000c22 <HAL_GPIO_WritePin>

	 	  HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fa4d 	bl	80006e0 <HAL_Delay>
	 	  keyboardhid.KEYCODE1 = 0x00;// nenhuma tecla pressionada, caso soltar a tecla
 8000246:	4b4f      	ldr	r3, [pc, #316]	; (8000384 <main+0x238>)
 8000248:	2200      	movs	r2, #0
 800024a:	709a      	strb	r2, [r3, #2]
	 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800024c:	2208      	movs	r2, #8
 800024e:	494d      	ldr	r1, [pc, #308]	; (8000384 <main+0x238>)
 8000250:	484d      	ldr	r0, [pc, #308]	; (8000388 <main+0x23c>)
 8000252:	f005 fa19 	bl	8005688 <USBD_HID_SendReport>
	 	  HAL_Delay(10);
 8000256:	200a      	movs	r0, #10
 8000258:	f000 fa42 	bl	80006e0 <HAL_Delay>
	 	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000262:	4847      	ldr	r0, [pc, #284]	; (8000380 <main+0x234>)
 8000264:	f000 fcdd 	bl	8000c22 <HAL_GPIO_WritePin>
  }

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8000268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026c:	4843      	ldr	r0, [pc, #268]	; (800037c <main+0x230>)
 800026e:	f000 fcc1 	bl	8000bf4 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d139      	bne.n	80002ec <main+0x1a0>
 8000278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027c:	483f      	ldr	r0, [pc, #252]	; (800037c <main+0x230>)
 800027e:	f000 fcb9 	bl	8000bf4 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d131      	bne.n	80002ec <main+0x1a0>
 8000288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028c:	483b      	ldr	r0, [pc, #236]	; (800037c <main+0x230>)
 800028e:	f000 fcb1 	bl	8000bf4 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b01      	cmp	r3, #1
 8000296:	d129      	bne.n	80002ec <main+0x1a0>
 8000298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800029c:	4837      	ldr	r0, [pc, #220]	; (800037c <main+0x230>)
 800029e:	f000 fca9 	bl	8000bf4 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d121      	bne.n	80002ec <main+0x1a0>
	 		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	4834      	ldr	r0, [pc, #208]	; (8000380 <main+0x234>)
 80002b0:	f000 fcb7 	bl	8000c22 <HAL_GPIO_WritePin>
	 		  	  keyboardhid.KEYCODE1 = 81; // up key
 80002b4:	4b33      	ldr	r3, [pc, #204]	; (8000384 <main+0x238>)
 80002b6:	2251      	movs	r2, #81	; 0x51
 80002b8:	709a      	strb	r2, [r3, #2]
	 		 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid)); // envia o report criado
 80002ba:	2208      	movs	r2, #8
 80002bc:	4931      	ldr	r1, [pc, #196]	; (8000384 <main+0x238>)
 80002be:	4832      	ldr	r0, [pc, #200]	; (8000388 <main+0x23c>)
 80002c0:	f005 f9e2 	bl	8005688 <USBD_HID_SendReport>
	 		 	  HAL_Delay(50);
 80002c4:	2032      	movs	r0, #50	; 0x32
 80002c6:	f000 fa0b 	bl	80006e0 <HAL_Delay>
	 		 	  keyboardhid.KEYCODE1 = 0x00;// nenhuma tecla pressionada, caso soltar a tecla
 80002ca:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <main+0x238>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	709a      	strb	r2, [r3, #2]
	 		 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80002d0:	2208      	movs	r2, #8
 80002d2:	492c      	ldr	r1, [pc, #176]	; (8000384 <main+0x238>)
 80002d4:	482c      	ldr	r0, [pc, #176]	; (8000388 <main+0x23c>)
 80002d6:	f005 f9d7 	bl	8005688 <USBD_HID_SendReport>
	 		 	  HAL_Delay(10);
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 fa00 	bl	80006e0 <HAL_Delay>
	 		 	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e6:	4826      	ldr	r0, [pc, #152]	; (8000380 <main+0x234>)
 80002e8:	f000 fc9b 	bl	8000c22 <HAL_GPIO_WritePin>

	 	  }

	 	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 80002ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f0:	4822      	ldr	r0, [pc, #136]	; (800037c <main+0x230>)
 80002f2:	f000 fc7f 	bl	8000bf4 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	f47f af31 	bne.w	8000160 <main+0x14>
 80002fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000302:	481e      	ldr	r0, [pc, #120]	; (800037c <main+0x230>)
 8000304:	f000 fc76 	bl	8000bf4 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	2b01      	cmp	r3, #1
 800030c:	f47f af28 	bne.w	8000160 <main+0x14>
 8000310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000314:	4819      	ldr	r0, [pc, #100]	; (800037c <main+0x230>)
 8000316:	f000 fc6d 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	f47f af1f 	bne.w	8000160 <main+0x14>
 8000322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000326:	4815      	ldr	r0, [pc, #84]	; (800037c <main+0x230>)
 8000328:	f000 fc64 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	f47f af16 	bne.w	8000160 <main+0x14>
	 	  	  keyboardhid.KEYCODE1 = 82; // down key
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <main+0x238>)
 8000336:	2252      	movs	r2, #82	; 0x52
 8000338:	709a      	strb	r2, [r3, #2]
	 	 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid)); // envia o report criado
 800033a:	2208      	movs	r2, #8
 800033c:	4911      	ldr	r1, [pc, #68]	; (8000384 <main+0x238>)
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <main+0x23c>)
 8000340:	f005 f9a2 	bl	8005688 <USBD_HID_SendReport>

	 	 	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <main+0x234>)
 800034c:	f000 fc69 	bl	8000c22 <HAL_GPIO_WritePin>

	 	 	  HAL_Delay(50);
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f000 f9c5 	bl	80006e0 <HAL_Delay>
	 	 	  keyboardhid.KEYCODE1 = 0x00;// nenhuma tecla pressionada, caso soltar a tecla
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <main+0x238>)
 8000358:	2200      	movs	r2, #0
 800035a:	709a      	strb	r2, [r3, #2]
	 	 	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800035c:	2208      	movs	r2, #8
 800035e:	4909      	ldr	r1, [pc, #36]	; (8000384 <main+0x238>)
 8000360:	4809      	ldr	r0, [pc, #36]	; (8000388 <main+0x23c>)
 8000362:	f005 f991 	bl	8005688 <USBD_HID_SendReport>
	 	 	  HAL_Delay(10);
 8000366:	200a      	movs	r0, #10
 8000368:	f000 f9ba 	bl	80006e0 <HAL_Delay>
	 	 	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000372:	4803      	ldr	r0, [pc, #12]	; (8000380 <main+0x234>)
 8000374:	f000 fc55 	bl	8000c22 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8000378:	e6f2      	b.n	8000160 <main+0x14>
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40010800 	.word	0x40010800
 8000384:	20000174 	.word	0x20000174
 8000388:	20000198 	.word	0x20000198

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b094      	sub	sp, #80	; 0x50
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f006 fe34 	bl	8007008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	4618      	mov	r0, r3
 80003e4:	f002 f8e0 	bl	80025a8 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ee:	f000 f881 	bl	80004f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000402:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fb4a 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800041a:	f000 f86b 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800041e:	2310      	movs	r3, #16
 8000420:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000422:	2300      	movs	r3, #0
 8000424:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4618      	mov	r0, r3
 800042a:	f002 fca7 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000434:	f000 f85e 	bl	80004f4 <Error_Handler>
  }
}
 8000438:	bf00      	nop
 800043a:	3750      	adds	r7, #80	; 0x50
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <MX_GPIO_Init+0xa8>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <MX_GPIO_Init+0xa8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <MX_GPIO_Init+0xa8>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_GPIO_Init+0xa8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_GPIO_Init+0xa8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <MX_GPIO_Init+0xa8>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_GPIO_Init+0xa8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80004a2:	4812      	ldr	r0, [pc, #72]	; (80004ec <MX_GPIO_Init+0xac>)
 80004a4:	f000 fbbd 	bl	8000c22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <MX_GPIO_Init+0xb0>)
 80004be:	f000 fa3f 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_GPIO_Init+0xac>)
 80004dc:	f000 fa30 	bl	8000940 <HAL_GPIO_Init>

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fa:	e7fe      	b.n	80004fa <Error_Handler+0x6>

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a6:	f000 f87f 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005b6:	f000 fc7d 	bl	8000eb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000065c 	.word	0x2000065c

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f6:	f7ff ffe5 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f006 fce1 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fda5 	bl	800014c <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800060c:	080070a4 	.word	0x080070a4
  ldr r2, =_sbss
 8000610:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000614:	20000948 	.word	0x20000948

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f945 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff ff60 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f95d 	bl	8000926 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f925 	bl	80008d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20000194 	.word	0x20000194

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000194 	.word	0x20000194

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff fff0 	bl	80006cc <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_Delay+0x40>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffe0 	bl	80006cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000008 	.word	0x20000008

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 021f 	and.w	r2, r3, #31
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <__NVIC_EnableIRQ+0x34>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	095b      	lsrs	r3, r3, #5
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff90 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff2d 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff42 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff90 	bl	8000814 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5f 	bl	80007c0 <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff35 	bl	8000788 <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffa2 	bl	8000878 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b08b      	sub	sp, #44	; 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e127      	b.n	8000ba4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000954:	2201      	movs	r2, #1
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	f040 8116 	bne.w	8000b9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d034      	beq.n	80009e4 <HAL_GPIO_Init+0xa4>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d80d      	bhi.n	800099a <HAL_GPIO_Init+0x5a>
 800097e:	2b02      	cmp	r3, #2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0x9a>
 8000982:	2b02      	cmp	r3, #2
 8000984:	d804      	bhi.n	8000990 <HAL_GPIO_Init+0x50>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d031      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d01c      	beq.n	80009c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800098e:	e048      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000990:	2b03      	cmp	r3, #3
 8000992:	d043      	beq.n	8000a1c <HAL_GPIO_Init+0xdc>
 8000994:	2b11      	cmp	r3, #17
 8000996:	d01b      	beq.n	80009d0 <HAL_GPIO_Init+0x90>
          break;
 8000998:	e043      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800099a:	4a89      	ldr	r2, [pc, #548]	; (8000bc0 <HAL_GPIO_Init+0x280>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d026      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009a0:	4a87      	ldr	r2, [pc, #540]	; (8000bc0 <HAL_GPIO_Init+0x280>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d806      	bhi.n	80009b4 <HAL_GPIO_Init+0x74>
 80009a6:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <HAL_GPIO_Init+0x284>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d020      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009ac:	4a86      	ldr	r2, [pc, #536]	; (8000bc8 <HAL_GPIO_Init+0x288>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d01d      	beq.n	80009ee <HAL_GPIO_Init+0xae>
          break;
 80009b2:	e036      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009b4:	4a85      	ldr	r2, [pc, #532]	; (8000bcc <HAL_GPIO_Init+0x28c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d019      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009ba:	4a85      	ldr	r2, [pc, #532]	; (8000bd0 <HAL_GPIO_Init+0x290>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d016      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009c0:	4a84      	ldr	r2, [pc, #528]	; (8000bd4 <HAL_GPIO_Init+0x294>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0xae>
          break;
 80009c6:	e02c      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e028      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	3304      	adds	r3, #4
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e023      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3308      	adds	r3, #8
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e01e      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e019      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f6:	2304      	movs	r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e012      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	611a      	str	r2, [r3, #16]
          break;
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
          break;
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d801      	bhi.n	8000a2c <HAL_GPIO_Init+0xec>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	e001      	b.n	8000a30 <HAL_GPIO_Init+0xf0>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d802      	bhi.n	8000a3e <HAL_GPIO_Init+0xfe>
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x104>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	3b08      	subs	r3, #8
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	6a39      	ldr	r1, [r7, #32]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 8096 	beq.w	8000b9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b59      	ldr	r3, [pc, #356]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a58      	ldr	r2, [pc, #352]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a8a:	4a54      	ldr	r2, [pc, #336]	; (8000bdc <HAL_GPIO_Init+0x29c>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4b      	ldr	r2, [pc, #300]	; (8000be0 <HAL_GPIO_Init+0x2a0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x19e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <HAL_GPIO_Init+0x2a4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x19a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x196>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a48      	ldr	r2, [pc, #288]	; (8000bec <HAL_GPIO_Init+0x2ac>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x192>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e004      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae2:	f002 0203 	and.w	r2, r2, #3
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4093      	lsls	r3, r2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af0:	493a      	ldr	r1, [pc, #232]	; (8000bdc <HAL_GPIO_Init+0x29c>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4938      	ldr	r1, [pc, #224]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4933      	ldr	r1, [pc, #204]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	492e      	ldr	r1, [pc, #184]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4929      	ldr	r1, [pc, #164]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	4924      	ldr	r1, [pc, #144]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	491f      	ldr	r1, [pc, #124]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	491a      	ldr	r1, [pc, #104]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60cb      	str	r3, [r1, #12]
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4915      	ldr	r1, [pc, #84]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	fa22 f303 	lsr.w	r3, r2, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f47f aed0 	bne.w	8000954 <HAL_GPIO_Init+0x14>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	372c      	adds	r7, #44	; 0x2c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	10110000 	.word	0x10110000
 8000bc8:	10120000 	.word	0x10120000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10320000 	.word	0x10320000
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c32:	787b      	ldrb	r3, [r7, #1]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c38:	887a      	ldrh	r2, [r7, #2]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	041a      	lsls	r2, r3, #16
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c54:	b08b      	sub	sp, #44	; 0x2c
 8000c56:	af06      	add	r7, sp, #24
 8000c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0fd      	b.n	8000e60 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d106      	bne.n	8000c7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f005 ff1b 	bl	8006ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 f952 	bl	8002f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	687e      	ldr	r6, [r7, #4]
 8000c98:	466d      	mov	r5, sp
 8000c9a:	f106 0410 	add.w	r4, r6, #16
 8000c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	602b      	str	r3, [r5, #0]
 8000ca6:	1d33      	adds	r3, r6, #4
 8000ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000caa:	6838      	ldr	r0, [r7, #0]
 8000cac:	f002 f91c 	bl	8002ee8 <USB_CoreInit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0ce      	b.n	8000e60 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 f94d 	bl	8002f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e04c      	b.n	8000d6e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	b298      	uxth	r0, r3
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	3336      	adds	r3, #54	; 0x36
 8000d12:	4602      	mov	r2, r0
 8000d14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	3303      	adds	r3, #3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	3338      	adds	r3, #56	; 0x38
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	333c      	adds	r3, #60	; 0x3c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3340      	adds	r3, #64	; 0x40
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3ad      	bcc.n	8000cd4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e044      	b.n	8000e08 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3b5      	bcc.n	8000d7e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	687e      	ldr	r6, [r7, #4]
 8000e1a:	466d      	mov	r5, sp
 8000e1c:	f106 0410 	add.w	r4, r6, #16
 8000e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	602b      	str	r3, [r5, #0]
 8000e28:	1d33      	adds	r3, r6, #4
 8000e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2c:	6838      	ldr	r0, [r7, #0]
 8000e2e:	f002 f8a7 	bl	8002f80 <USB_DevInit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e00d      	b.n	8000e60 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fa18 	bl	800528e <USB_DevDisconnect>

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <HAL_PCD_Start+0x16>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e016      	b.n	8000eac <HAL_PCD_Start+0x44>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 f83c 	bl	8002f08 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e90:	2101      	movs	r1, #1
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f006 f85d 	bl	8006f52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 f9ec 	bl	800527a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f9ee 	bl	80052a2 <USB_ReadInterrupts>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed0:	d102      	bne.n	8000ed8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fb4a 	bl	800156c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f9e0 	bl	80052a2 <USB_ReadInterrupts>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eec:	d112      	bne.n	8000f14 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f00:	b292      	uxth	r2, r2
 8000f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f005 fe4f 	bl	8006baa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 f925 	bl	800115e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f9c2 	bl	80052a2 <USB_ReadInterrupts>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f28:	d10b      	bne.n	8000f42 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 f9ab 	bl	80052a2 <USB_ReadInterrupts>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f56:	d10b      	bne.n	8000f70 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 f994 	bl	80052a2 <USB_ReadInterrupts>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f84:	d126      	bne.n	8000fd4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0204 	bic.w	r2, r2, #4
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0208 	bic.w	r2, r2, #8
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f005 fe30 	bl	8006c1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f962 	bl	80052a2 <USB_ReadInterrupts>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fe8:	f040 8084 	bne.w	80010f4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	77fb      	strb	r3, [r7, #31]
 8000ff0:	e011      	b.n	8001016 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	441a      	add	r2, r3
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	8812      	ldrh	r2, [r2, #0]
 8001002:	b292      	uxth	r2, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	f107 0120 	add.w	r1, r7, #32
 800100a:	440b      	add	r3, r1
 800100c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001010:	7ffb      	ldrb	r3, [r7, #31]
 8001012:	3301      	adds	r3, #1
 8001014:	77fb      	strb	r3, [r7, #31]
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	2b07      	cmp	r3, #7
 800101a:	d9ea      	bls.n	8000ff2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	b292      	uxth	r2, r2
 8001030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800103c:	b29a      	uxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	b292      	uxth	r2, r2
 8001048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800104c:	bf00      	nop
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001056:	b29b      	uxth	r3, r3
 8001058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f6      	beq.n	800104e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
 800107c:	e010      	b.n	80010a0 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	4611      	mov	r1, r2
 8001086:	7ffa      	ldrb	r2, [r7, #31]
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	440a      	add	r2, r1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	f107 0120 	add.w	r1, r7, #32
 8001092:	440b      	add	r3, r1
 8001094:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001098:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	3301      	adds	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d9eb      	bls.n	800107e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 0208 	orr.w	r2, r2, #8
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0204 	orr.w	r2, r2, #4
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f005 fd7a 	bl	8006be8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 f8d2 	bl	80052a2 <USB_ReadInterrupts>
 80010fe:	4603      	mov	r3, r0
 8001100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001108:	d10e      	bne.n	8001128 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800111c:	b292      	uxth	r2, r2
 800111e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f005 fd33 	bl	8006b8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f8b8 	bl	80052a2 <USB_ReadInterrupts>
 8001132:	4603      	mov	r3, r0
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	d10b      	bne.n	8001156 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001150:	b292      	uxth	r2, r2
 8001152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_PCD_SetAddress+0x1a>
 8001174:	2302      	movs	r3, #2
 8001176:	e013      	b.n	80011a0 <HAL_PCD_SetAddress+0x42>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	78fa      	ldrb	r2, [r7, #3]
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	78fa      	ldrb	r2, [r7, #3]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f004 f85f 	bl	8005254 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4608      	mov	r0, r1
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	460b      	mov	r3, r1
 80011bc:	803b      	strh	r3, [r7, #0]
 80011be:	4613      	mov	r3, r2
 80011c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da0e      	bge.n	80011ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	705a      	strb	r2, [r3, #1]
 80011ea:	e00e      	b.n	800120a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0207 	and.w	r2, r3, #7
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001216:	883a      	ldrh	r2, [r7, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d102      	bne.n	8001240 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_PCD_EP_Open+0xa6>
 800124a:	2302      	movs	r3, #2
 800124c:	e00e      	b.n	800126c <HAL_PCD_EP_Open+0xc4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	4618      	mov	r0, r3
 800125e:	f001 feaf 	bl	8002fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800126a:	7afb      	ldrb	r3, [r7, #11]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da0e      	bge.n	80012a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	705a      	strb	r2, [r3, #1]
 80012a4:	e00e      	b.n	80012c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	f003 0207 	and.w	r2, r3, #7
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_PCD_EP_Close+0x6a>
 80012da:	2302      	movs	r3, #2
 80012dc:	e00e      	b.n	80012fc <HAL_PCD_EP_Close+0x88>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68f9      	ldr	r1, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 f9d1 	bl	8003694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	460b      	mov	r3, r1
 8001312:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	f003 0207 	and.w	r2, r3, #7
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2200      	movs	r2, #0
 8001342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	b2da      	uxtb	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6979      	ldr	r1, [r7, #20]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fb83 	bl	8003a6c <USB_EPStartXfer>
 8001366:	e005      	b.n	8001374 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6979      	ldr	r1, [r7, #20]
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fb7c 	bl	8003a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	460b      	mov	r3, r1
 800138c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2201      	movs	r2, #1
 80013c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6979      	ldr	r1, [r7, #20]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fb40 	bl	8003a6c <USB_EPStartXfer>
 80013ec:	e005      	b.n	80013fa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6979      	ldr	r1, [r7, #20]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fb39 	bl	8003a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0207 	and.w	r2, r3, #7
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d901      	bls.n	8001422 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e04c      	b.n	80014bc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da0e      	bge.n	8001448 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	705a      	strb	r2, [r3, #1]
 8001446:	e00c      	b.n	8001462 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	b2da      	uxtb	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_PCD_EP_SetStall+0x7e>
 800147e:	2302      	movs	r3, #2
 8001480:	e01c      	b.n	80014bc <HAL_PCD_EP_SetStall+0xb8>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68f9      	ldr	r1, [r7, #12]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fde2 	bl	800505a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	2b00      	cmp	r3, #0
 800149e:	d108      	bne.n	80014b2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f003 ff07 	bl	80052c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	f003 020f 	and.w	r2, r3, #15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d901      	bls.n	80014e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e040      	b.n	8001564 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0e      	bge.n	8001508 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	e00e      	b.n	8001526 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_EP_ClrStall+0x82>
 8001542:	2302      	movs	r3, #2
 8001544:	e00e      	b.n	8001564 <HAL_PCD_EP_ClrStall+0xa0>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fdd0 	bl	80050fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	; 0x38
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001574:	e2ec      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800158c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 8161 	bne.w	8001858 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d152      	bne.n	8001646 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b0:	81fb      	strh	r3, [r7, #14]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3328      	adds	r3, #40	; 0x28
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	3302      	adds	r3, #2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	441a      	add	r2, r3
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f005 faa7 	bl	8006b5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 829b 	beq.w	8001b50 <PCD_EP_ISR_Handler+0x5e4>
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8296 	bne.w	8001b50 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001644:	e284      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	2b00      	cmp	r3, #0
 800165e:	d034      	beq.n	80016ca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	3306      	adds	r3, #6
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f003 fe5d 	bl	800535e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016b0:	4013      	ands	r3, r2
 80016b2:	823b      	strh	r3, [r7, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	8a3a      	ldrh	r2, [r7, #16]
 80016ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016be:	b292      	uxth	r2, r2
 80016c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 fa1c 	bl	8006b00 <HAL_PCD_SetupStageCallback>
 80016c8:	e242      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f280 823e 	bge.w	8001b50 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e0:	4013      	ands	r3, r2
 80016e2:	83bb      	strh	r3, [r7, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	8bba      	ldrh	r2, [r7, #28]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ee:	b292      	uxth	r2, r2
 80016f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3306      	adds	r3, #6
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d019      	beq.n	800175a <PCD_EP_ISR_Handler+0x1ee>
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d015      	beq.n	800175a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800173e:	b29b      	uxth	r3, r3
 8001740:	f003 fe0d 	bl	800535e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	441a      	add	r2, r3
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f005 f9e5 	bl	8006b24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 81f2 	bne.w	8001b50 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d112      	bne.n	80017ba <PCD_EP_ISR_Handler+0x24e>
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800179e:	b29a      	uxth	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	801a      	strh	r2, [r3, #0]
 80017b8:	e02f      	b.n	800181a <PCD_EP_ISR_Handler+0x2ae>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b3e      	cmp	r3, #62	; 0x3e
 80017c0:	d813      	bhi.n	80017ea <PCD_EP_ISR_Handler+0x27e>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <PCD_EP_ISR_Handler+0x270>
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d8:	3301      	adds	r3, #1
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
 80017dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017de:	b29b      	uxth	r3, r3
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	e017      	b.n	800181a <PCD_EP_ISR_Handler+0x2ae>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <PCD_EP_ISR_Handler+0x298>
 80017fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001800:	3b01      	subs	r3, #1
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001806:	b29b      	uxth	r3, r3
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	b29b      	uxth	r3, r3
 800180c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001814:	b29a      	uxth	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182a:	827b      	strh	r3, [r7, #18]
 800182c:	8a7b      	ldrh	r3, [r7, #18]
 800182e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001832:	827b      	strh	r3, [r7, #18]
 8001834:	8a7b      	ldrh	r3, [r7, #18]
 8001836:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800183a:	827b      	strh	r3, [r7, #18]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	8a7b      	ldrh	r3, [r7, #18]
 8001842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800184a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001852:	b29b      	uxth	r3, r3
 8001854:	8013      	strh	r3, [r2, #0]
 8001856:	e17b      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800186a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800186e:	2b00      	cmp	r3, #0
 8001870:	f280 80ea 	bge.w	8001a48 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	f640 738f 	movw	r3, #3983	; 0xf8f
 800188a:	4013      	ands	r3, r2
 800188c:	853b      	strh	r3, [r7, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800189e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a2:	b292      	uxth	r2, r2
 80018a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d122      	bne.n	800190a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	3306      	adds	r3, #6
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8087 	beq.w	8001a04 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	6959      	ldr	r1, [r3, #20]
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	88da      	ldrh	r2, [r3, #6]
 8001902:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001904:	f003 fd2b 	bl	800535e <USB_ReadPMA>
 8001908:	e07c      	b.n	8001a04 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d108      	bne.n	8001924 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001914:	461a      	mov	r2, r3
 8001916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f927 	bl	8001b6c <HAL_PCD_EP_DB_Receive>
 800191e:	4603      	mov	r3, r0
 8001920:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001922:	e06f      	b.n	8001a04 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800193a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	441a      	add	r2, r3
 800194e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001960:	b29b      	uxth	r3, r3
 8001962:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d021      	beq.n	80019c2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	3302      	adds	r3, #2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02a      	beq.n	8001a04 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	6959      	ldr	r1, [r3, #20]
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	891a      	ldrh	r2, [r3, #8]
 80019ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019bc:	f003 fccf 	bl	800535e <USB_ReadPMA>
 80019c0:	e020      	b.n	8001a04 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	3306      	adds	r3, #6
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	6959      	ldr	r1, [r3, #20]
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	895a      	ldrh	r2, [r3, #10]
 80019fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a00:	f003 fcad 	bl	800535e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a0a:	441a      	add	r2, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a16:	441a      	add	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <PCD_EP_ISR_Handler+0x4c2>
 8001a24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d206      	bcs.n	8001a3c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f005 f875 	bl	8006b24 <HAL_PCD_DataOutStageCallback>
 8001a3a:	e005      	b.n	8001a48 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 f812 	bl	8003a6c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d07e      	beq.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a80:	843b      	strh	r3, [r7, #32]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	441a      	add	r2, r3
 8001a90:	8c3b      	ldrh	r3, [r7, #32]
 8001a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	78db      	ldrb	r3, [r3, #3]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d00c      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x554>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	78db      	ldrb	r3, [r3, #3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d146      	bne.n	8001b44 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ab6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d141      	bne.n	8001b44 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	8bfb      	ldrh	r3, [r7, #30]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d906      	bls.n	8001b02 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	8bfb      	ldrh	r3, [r7, #30]
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	e002      	b.n	8001b08 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d106      	bne.n	8001b1e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f005 f81f 	bl	8006b5a <HAL_PCD_DataInStageCallback>
 8001b1c:	e018      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	8bfb      	ldrh	r3, [r7, #30]
 8001b24:	441a      	add	r2, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	8bfb      	ldrh	r3, [r7, #30]
 8001b30:	441a      	add	r2, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 ff95 	bl	8003a6c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b42:	e005      	b.n	8001b50 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f91b 	bl	8001d86 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f6ff ad0a 	blt.w	8001576 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3738      	adds	r7, #56	; 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d07e      	beq.n	8001c82 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	8b7b      	ldrh	r3, [r7, #26]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d306      	bcc.n	8001bc6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	8b7b      	ldrh	r3, [r7, #26]
 8001bbe:	1ad2      	subs	r2, r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	e002      	b.n	8001bcc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d123      	bne.n	8001c1c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bee:	833b      	strh	r3, [r7, #24]
 8001bf0:	8b3b      	ldrh	r3, [r7, #24]
 8001bf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bf6:	833b      	strh	r3, [r7, #24]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	441a      	add	r2, r3
 8001c06:	8b3b      	ldrh	r3, [r7, #24]
 8001c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01f      	beq.n	8001c66 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c40:	82fb      	strh	r3, [r7, #22]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	441a      	add	r2, r3
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c66:	8b7b      	ldrh	r3, [r7, #26]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8087 	beq.w	8001d7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	6959      	ldr	r1, [r3, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	891a      	ldrh	r2, [r3, #8]
 8001c7a:	8b7b      	ldrh	r3, [r7, #26]
 8001c7c:	f003 fb6f 	bl	800535e <USB_ReadPMA>
 8001c80:	e07c      	b.n	8001d7c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	3306      	adds	r3, #6
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001caa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	8b7b      	ldrh	r3, [r7, #26]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d306      	bcc.n	8001cc4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	8b7b      	ldrh	r3, [r7, #26]
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	e002      	b.n	8001cca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d123      	bne.n	8001d1a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cec:	83fb      	strh	r3, [r7, #30]
 8001cee:	8bfb      	ldrh	r3, [r7, #30]
 8001cf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cf4:	83fb      	strh	r3, [r7, #30]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	441a      	add	r2, r3
 8001d04:	8bfb      	ldrh	r3, [r7, #30]
 8001d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11f      	bne.n	8001d64 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	8bbb      	ldrh	r3, [r7, #28]
 8001d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d64:	8b7b      	ldrh	r3, [r7, #26]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	6959      	ldr	r1, [r3, #20]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	895a      	ldrh	r2, [r3, #10]
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	f003 faf1 	bl	800535e <USB_ReadPMA>
    }
  }

  return count;
 8001d7c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b0a2      	sub	sp, #136	; 0x88
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	4613      	mov	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 81c7 	beq.w	800212e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	3302      	adds	r3, #2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d907      	bls.n	8001de8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	e002      	b.n	8001dee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 80b9 	bne.w	8001f6a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d126      	bne.n	8001e4e <HAL_PCD_EP_DB_Transmit+0xc8>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	4413      	add	r3, r2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	011a      	lsls	r2, r3, #4
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	4413      	add	r3, r2
 8001e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	e01a      	b.n	8001e84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	785b      	ldrb	r3, [r3, #1]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d116      	bne.n	8001e84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	4413      	add	r3, r2
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	011a      	lsls	r2, r3, #4
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	4413      	add	r3, r2
 8001e78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d126      	bne.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	011a      	lsls	r2, r3, #4
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	e017      	b.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d113      	bne.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	011a      	lsls	r2, r3, #4
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	4413      	add	r3, r2
 8001f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f004 fe1f 	bl	8006b5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 82d1 	beq.w	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	827b      	strh	r3, [r7, #18]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	8a7b      	ldrh	r3, [r7, #18]
 8001f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	8013      	strh	r3, [r2, #0]
 8001f68:	e2af      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d021      	beq.n	8001fb8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	441a      	add	r2, r3
 8001fa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	f040 8283 	bne.w	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001fcc:	441a      	add	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001fda:	441a      	add	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d309      	bcc.n	8002000 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	e015      	b.n	800202c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002008:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800200c:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002016:	e009      	b.n	800202c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d155      	bne.n	80020e0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	4413      	add	r3, r2
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	011a      	lsls	r2, r3, #4
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	4413      	add	r3, r2
 8002056:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
 800205c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205e:	2b00      	cmp	r3, #0
 8002060:	d112      	bne.n	8002088 <HAL_PCD_EP_DB_Transmit+0x302>
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800206c:	b29a      	uxth	r2, r3
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002080:	b29a      	uxth	r2, r3
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e047      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x392>
 8002088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208a:	2b3e      	cmp	r3, #62	; 0x3e
 800208c:	d811      	bhi.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x32c>
 800208e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_PCD_EP_DB_Transmit+0x31e>
 800209e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a0:	3301      	adds	r3, #1
 80020a2:	653b      	str	r3, [r7, #80]	; 0x50
 80020a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	029b      	lsls	r3, r3, #10
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	e032      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x392>
 80020b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	653b      	str	r3, [r7, #80]	; 0x50
 80020b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x342>
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	3b01      	subs	r3, #1
 80020c6:	653b      	str	r3, [r7, #80]	; 0x50
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d8:	b29a      	uxth	r2, r3
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e01b      	b.n	8002118 <HAL_PCD_EP_DB_Transmit+0x392>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d117      	bne.n	8002118 <HAL_PCD_EP_DB_Transmit+0x392>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	643b      	str	r3, [r7, #64]	; 0x40
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fc:	4413      	add	r3, r2
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	011a      	lsls	r2, r3, #4
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	4413      	add	r3, r2
 800210a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002112:	b29a      	uxth	r2, r3
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	891a      	ldrh	r2, [r3, #8]
 8002124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002126:	b29b      	uxth	r3, r3
 8002128:	f003 f8d5 	bl	80052d6 <USB_WritePMA>
 800212c:	e1cd      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	3306      	adds	r3, #6
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002156:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002162:	429a      	cmp	r2, r3
 8002164:	d307      	bcc.n	8002176 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	619a      	str	r2, [r3, #24]
 8002174:	e002      	b.n	800217c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 80c1 	bne.w	8002308 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d126      	bne.n	80021dc <HAL_PCD_EP_DB_Transmit+0x456>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a2:	4413      	add	r3, r2
 80021a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	011a      	lsls	r2, r3, #4
 80021ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ae:	4413      	add	r3, r2
 80021b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c4:	801a      	strh	r2, [r3, #0]
 80021c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e01a      	b.n	8002212 <HAL_PCD_EP_DB_Transmit+0x48c>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d116      	bne.n	8002212 <HAL_PCD_EP_DB_Transmit+0x48c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	673b      	str	r3, [r7, #112]	; 0x70
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f8:	4413      	add	r3, r2
 80021fa:	673b      	str	r3, [r7, #112]	; 0x70
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	011a      	lsls	r2, r3, #4
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	4413      	add	r3, r2
 8002206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220e:	2200      	movs	r2, #0
 8002210:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d126      	bne.n	8002270 <HAL_PCD_EP_DB_Transmit+0x4ea>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002236:	4413      	add	r3, r2
 8002238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	011a      	lsls	r2, r3, #4
 8002240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002242:	4413      	add	r3, r2
 8002244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
 800224a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002254:	b29a      	uxth	r2, r3
 8002256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002268:	b29a      	uxth	r2, r3
 800226a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e01c      	b.n	80022aa <HAL_PCD_EP_DB_Transmit+0x524>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d118      	bne.n	80022aa <HAL_PCD_EP_DB_Transmit+0x524>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002288:	4413      	add	r3, r2
 800228a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	011a      	lsls	r2, r3, #4
 8002294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002298:	4413      	add	r3, r2
 800229a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800229e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	4619      	mov	r1, r3
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f004 fc52 	bl	8006b5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8104 	bne.w	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]
 8002306:	e0e0      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d121      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800234e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 80b4 	bne.w	80024ca <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800236a:	441a      	add	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002378:	441a      	add	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d309      	bcc.n	800239e <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e015      	b.n	80023ca <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 80023a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023aa:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023b4:	e009      	b.n	80023ca <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	667b      	str	r3, [r7, #100]	; 0x64
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d155      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x6fe>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	4413      	add	r3, r2
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	011a      	lsls	r2, r3, #4
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	4413      	add	r3, r2
 80023fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002402:	2b00      	cmp	r3, #0
 8002404:	d112      	bne.n	800242c <HAL_PCD_EP_DB_Transmit+0x6a6>
 8002406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002410:	b29a      	uxth	r2, r3
 8002412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002424:	b29a      	uxth	r2, r3
 8002426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e044      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x730>
 800242c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800242e:	2b3e      	cmp	r3, #62	; 0x3e
 8002430:	d811      	bhi.n	8002456 <HAL_PCD_EP_DB_Transmit+0x6d0>
 8002432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	677b      	str	r3, [r7, #116]	; 0x74
 8002438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_PCD_EP_DB_Transmit+0x6c2>
 8002442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002444:	3301      	adds	r3, #1
 8002446:	677b      	str	r3, [r7, #116]	; 0x74
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	b29b      	uxth	r3, r3
 800244c:	029b      	lsls	r3, r3, #10
 800244e:	b29a      	uxth	r2, r3
 8002450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e02f      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x730>
 8002456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	677b      	str	r3, [r7, #116]	; 0x74
 800245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x6e6>
 8002466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002468:	3b01      	subs	r3, #1
 800246a:	677b      	str	r3, [r7, #116]	; 0x74
 800246c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246e:	b29b      	uxth	r3, r3
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	b29b      	uxth	r3, r3
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29a      	uxth	r2, r3
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e018      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x730>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d114      	bne.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x730>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249a:	4413      	add	r3, r2
 800249c:	667b      	str	r3, [r7, #100]	; 0x64
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	011a      	lsls	r2, r3, #4
 80024a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a6:	4413      	add	r3, r2
 80024a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024ac:	663b      	str	r3, [r7, #96]	; 0x60
 80024ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6959      	ldr	r1, [r3, #20]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	895a      	ldrh	r2, [r3, #10]
 80024c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f002 ff06 	bl	80052d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e4:	823b      	strh	r3, [r7, #16]
 80024e6:	8a3b      	ldrh	r3, [r7, #16]
 80024e8:	f083 0310 	eor.w	r3, r3, #16
 80024ec:	823b      	strh	r3, [r7, #16]
 80024ee:	8a3b      	ldrh	r3, [r7, #16]
 80024f0:	f083 0320 	eor.w	r3, r3, #32
 80024f4:	823b      	strh	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	8a3b      	ldrh	r3, [r7, #16]
 8002506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002516:	b29b      	uxth	r3, r3
 8002518:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3788      	adds	r7, #136	; 0x88
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	4613      	mov	r3, r2
 8002534:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002536:	897b      	ldrh	r3, [r7, #10]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e009      	b.n	800256e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800255a:	897a      	ldrh	r2, [r7, #10]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	b29a      	uxth	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	80da      	strh	r2, [r3, #6]
 8002582:	e00b      	b.n	800259c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2201      	movs	r2, #1
 8002588:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	b29a      	uxth	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e26c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e246      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe f822 	bl	80006cc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe f81e 	bl	80006cc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1fa      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe f80e 	bl	80006cc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe f80a 	bl	80006cc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1e6      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1ba      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fd ffc3 	bl	80006cc <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7fd ffbf 	bl	80006cc <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e19b      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fd ffa2 	bl	80006cc <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fd ff9e 	bl	80006cc <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e17a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fd ff82 	bl	80006cc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fd ff7e 	bl	80006cc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e15a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 faa8 	bl	8002d40 <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fd ff68 	bl	80006cc <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fd ff64 	bl	80006cc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e140      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a93      	ldr	r2, [pc, #588]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fd ff25 	bl	80006cc <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fd ff21 	bl	80006cc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0fd      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a72      	ldr	r2, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fd fed5 	bl	80006cc <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fd fed1 	bl	80006cc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0ab      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fd febf 	bl	80006cc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fd febb 	bl	80006cc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e095      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a47      	ldr	r2, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8081 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fd fe8f 	bl	80006cc <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fd fe8b 	bl	80006cc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e067      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	492d      	ldr	r1, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	4927      	ldr	r1, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fd fe5f 	bl	80006cc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fd fe5b 	bl	80006cc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e037      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e02f      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fd fe48 	bl	80006cc <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fd fe44 	bl	80006cc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e020      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e018      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e013      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42420060 	.word	0x42420060

08002aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0d0      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d910      	bls.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4965      	ldr	r1, [pc, #404]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0b8      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b04:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	494d      	ldr	r1, [pc, #308]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d040      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e073      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06b      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4936      	ldr	r1, [pc, #216]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fd fd98 	bl	80006cc <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fd fd94 	bl	80006cc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e053      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d210      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4922      	ldr	r1, [pc, #136]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e032      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4916      	ldr	r1, [pc, #88]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	490e      	ldr	r1, [pc, #56]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c36:	f000 f821 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1cc>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fcf6 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	0800708c 	.word	0x0800708c
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	b490      	push	{r4, r7}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c84:	1d3c      	adds	r4, r7, #4
 8002c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x40>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002cba:	e02d      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cbe:	623b      	str	r3, [r7, #32]
      break;
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cce:	4413      	add	r3, r2
 8002cd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c5b      	lsrs	r3, r3, #17
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cee:	4413      	add	r3, r2
 8002cf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cfa:	fb02 f203 	mul.w	r2, r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	e004      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	623b      	str	r3, [r7, #32]
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d1a:	623b      	str	r3, [r7, #32]
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc90      	pop	{r4, r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	08007030 	.word	0x08007030
 8002d30:	08007040 	.word	0x08007040
 8002d34:	40021000 	.word	0x40021000
 8002d38:	007a1200 	.word	0x007a1200
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <RCC_Delay+0x34>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <RCC_Delay+0x38>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d5c:	bf00      	nop
  }
  while (Delay --);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f9      	bne.n	8002d5c <RCC_Delay+0x1c>
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000
 8002d78:	10624dd3 	.word	0x10624dd3

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
 8002db4:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d118      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd fc76 	bl	80006cc <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fd fc72 	bl	80006cc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e06d      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02e      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d027      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e30:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fd fc41 	bl	80006cc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd fc3d 	bl	80006cc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e036      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	490b      	ldr	r1, [pc, #44]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42420440 	.word	0x42420440

08002ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ee8:	b084      	sub	sp, #16
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	f107 0014 	add.w	r0, r7, #20
 8002ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	b004      	add	sp, #16
 8002f06:	4770      	bx	lr

08002f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f18:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f80:	b084      	sub	sp, #16
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	f107 0014 	add.w	r0, r7, #20
 8002f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	b004      	add	sp, #16
 8002fbe:	4770      	bx	lr

08002fc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b09b      	sub	sp, #108	; 0x6c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	78db      	ldrb	r3, [r3, #3]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d81f      	bhi.n	8003032 <USB_ActivateEndpoint+0x72>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <USB_ActivateEndpoint+0x38>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	08003025 	.word	0x08003025
 8003000:	0800303b 	.word	0x0800303b
 8003004:	08003017 	.word	0x08003017
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003008:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800300c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003010:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003014:	e012      	b.n	800303c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003016:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800301a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800301e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003022:	e00b      	b.n	800303c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003024:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003030:	e004      	b.n	800303c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003038:	e000      	b.n	800303c <USB_ActivateEndpoint+0x7c>
      break;
 800303a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	441a      	add	r2, r3
 8003046:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800304a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	b29b      	uxth	r3, r3
 800305c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	b29a      	uxth	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	441a      	add	r2, r3
 800308c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	7b1b      	ldrb	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8149 	bne.w	8003340 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8084 	beq.w	80031c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	011a      	lsls	r2, r3, #4
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	88db      	ldrh	r3, [r3, #6]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	81fb      	strh	r3, [r7, #14]
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <USB_ActivateEndpoint+0x17c>
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	81bb      	strh	r3, [r7, #12]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	89bb      	ldrh	r3, [r7, #12]
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	78db      	ldrb	r3, [r3, #3]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d020      	beq.n	8003186 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315a:	813b      	strh	r3, [r7, #8]
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	f083 0320 	eor.w	r3, r3, #32
 8003162:	813b      	strh	r3, [r7, #8]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	893b      	ldrh	r3, [r7, #8]
 8003170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	b29b      	uxth	r3, r3
 8003182:	8013      	strh	r3, [r2, #0]
 8003184:	e27f      	b.n	8003686 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319c:	817b      	strh	r3, [r7, #10]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	8013      	strh	r3, [r2, #0]
 80031be:	e262      	b.n	8003686 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	4413      	add	r3, r2
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	011a      	lsls	r2, r3, #4
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	88db      	ldrh	r3, [r3, #6]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	4413      	add	r3, r2
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	011a      	lsls	r2, r3, #4
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	4413      	add	r3, r2
 8003212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d112      	bne.n	8003246 <USB_ActivateEndpoint+0x286>
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800322a:	b29a      	uxth	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800323e:	b29a      	uxth	r2, r3
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	e02f      	b.n	80032a6 <USB_ActivateEndpoint+0x2e6>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b3e      	cmp	r3, #62	; 0x3e
 800324c:	d813      	bhi.n	8003276 <USB_ActivateEndpoint+0x2b6>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <USB_ActivateEndpoint+0x2a8>
 8003262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003264:	3301      	adds	r3, #1
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
 8003268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800326a:	b29b      	uxth	r3, r3
 800326c:	029b      	lsls	r3, r3, #10
 800326e:	b29a      	uxth	r2, r3
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	e017      	b.n	80032a6 <USB_ActivateEndpoint+0x2e6>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <USB_ActivateEndpoint+0x2d0>
 800328a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328c:	3b01      	subs	r3, #1
 800328e:	663b      	str	r3, [r7, #96]	; 0x60
 8003290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003292:	b29b      	uxth	r3, r3
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	b29b      	uxth	r3, r3
 8003298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800329c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	83fb      	strh	r3, [r7, #30]
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01b      	beq.n	80032f6 <USB_ActivateEndpoint+0x336>
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d4:	83bb      	strh	r3, [r7, #28]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	8bbb      	ldrh	r3, [r7, #28]
 80032e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	837b      	strh	r3, [r7, #26]
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003314:	837b      	strh	r3, [r7, #26]
 8003316:	8b7b      	ldrh	r3, [r7, #26]
 8003318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800331c:	837b      	strh	r3, [r7, #26]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	8b7b      	ldrh	r3, [r7, #26]
 800332a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	b29b      	uxth	r3, r3
 800333c:	8013      	strh	r3, [r2, #0]
 800333e:	e1a2      	b.n	8003686 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003370:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003378:	b29b      	uxth	r3, r3
 800337a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	4413      	add	r3, r2
 800338e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	011a      	lsls	r2, r3, #4
 8003396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003398:	4413      	add	r3, r2
 800339a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339e:	657b      	str	r3, [r7, #84]	; 0x54
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	891b      	ldrh	r3, [r3, #8]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	653b      	str	r3, [r7, #80]	; 0x50
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c0:	4413      	add	r3, r2
 80033c2:	653b      	str	r3, [r7, #80]	; 0x50
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	011a      	lsls	r2, r3, #4
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	895b      	ldrh	r3, [r3, #10]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8091 	bne.w	8003510 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80033fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80033fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01b      	beq.n	800343e <USB_ActivateEndpoint+0x47e>
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800342a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	873b      	strh	r3, [r7, #56]	; 0x38
 800344c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01b      	beq.n	800348e <USB_ActivateEndpoint+0x4ce>
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800347a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800347e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800348a:	b29b      	uxth	r3, r3
 800348c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80034c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
 800350e:	e0ba      	b.n	8003686 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01d      	beq.n	8003568 <USB_ActivateEndpoint+0x5a8>
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003578:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01d      	beq.n	80035c0 <USB_ActivateEndpoint+0x600>
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	78db      	ldrb	r3, [r3, #3]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d024      	beq.n	8003612 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80035e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035e6:	f083 0320 	eor.w	r3, r3, #32
 80035ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
 8003610:	e01d      	b.n	800364e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003628:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800363a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364a:	b29b      	uxth	r3, r3
 800364c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003686:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800368a:	4618      	mov	r0, r3
 800368c:	376c      	adds	r7, #108	; 0x6c
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003694:	b480      	push	{r7}
 8003696:	b08d      	sub	sp, #52	; 0x34
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	7b1b      	ldrb	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 808e 	bne.w	80037c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d044      	beq.n	800373a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	81bb      	strh	r3, [r7, #12]
 80036be:	89bb      	ldrh	r3, [r7, #12]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <USB_DeactivateEndpoint+0x6c>
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	817b      	strh	r3, [r7, #10]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003716:	813b      	strh	r3, [r7, #8]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]
 8003738:	e192      	b.n	8003a60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	827b      	strh	r3, [r7, #18]
 8003748:	8a7b      	ldrh	r3, [r7, #18]
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01b      	beq.n	800378a <USB_DeactivateEndpoint+0xf6>
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	823b      	strh	r3, [r7, #16]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	8a3b      	ldrh	r3, [r7, #16]
 8003776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800377e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	b29b      	uxth	r3, r3
 8003788:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	81fb      	strh	r3, [r7, #14]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	89fb      	ldrh	r3, [r7, #14]
 80037ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	b29b      	uxth	r3, r3
 80037c0:	8013      	strh	r3, [r2, #0]
 80037c2:	e14d      	b.n	8003a60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 80a5 	bne.w	8003918 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	843b      	strh	r3, [r7, #32]
 80037dc:	8c3b      	ldrh	r3, [r7, #32]
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01b      	beq.n	800381e <USB_DeactivateEndpoint+0x18a>
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	83fb      	strh	r3, [r7, #30]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	8bfb      	ldrh	r3, [r7, #30]
 800380a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800380e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	83bb      	strh	r3, [r7, #28]
 800382c:	8bbb      	ldrh	r3, [r7, #28]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01b      	beq.n	800386e <USB_DeactivateEndpoint+0x1da>
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384c:	837b      	strh	r3, [r7, #26]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	8b7b      	ldrh	r3, [r7, #26]
 800385a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800386a:	b29b      	uxth	r3, r3
 800386c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003884:	833b      	strh	r3, [r7, #24]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	8b3b      	ldrh	r3, [r7, #24]
 8003892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038bc:	82fb      	strh	r3, [r7, #22]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	441a      	add	r2, r3
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038da:	b29b      	uxth	r3, r3
 80038dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f4:	82bb      	strh	r3, [r7, #20]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	8abb      	ldrh	r3, [r7, #20]
 8003902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
 8003916:	e0a3      	b.n	8003a60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003926:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <USB_DeactivateEndpoint+0x2d4>
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <USB_DeactivateEndpoint+0x324>
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	853b      	strh	r3, [r7, #40]	; 0x28
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3734      	adds	r7, #52	; 0x34
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0cc      	sub	sp, #304	; 0x130
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	6018      	str	r0, [r3, #0]
 8003a76:	463b      	mov	r3, r7
 8003a78:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 872e 	bne.w	80048e2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003a86:	463b      	mov	r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d905      	bls.n	8003aa2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003a96:	463b      	mov	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003aa0:	e004      	b.n	8003aac <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003aac:	463b      	mov	r3, r7
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	7b1b      	ldrb	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d134      	bne.n	8003b20 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6959      	ldr	r1, [r3, #20]
 8003abc:	463b      	mov	r3, r7
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	88da      	ldrh	r2, [r3, #6]
 8003ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	1d38      	adds	r0, r7, #4
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	f001 fc03 	bl	80052d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	1d3a      	adds	r2, r7, #4
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f107 0310 	add.w	r3, r7, #16
 8003aea:	f107 0210 	add.w	r2, r7, #16
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	440a      	add	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	463b      	mov	r3, r7
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	011a      	lsls	r2, r3, #4
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	f000 beac 	b.w	8004878 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003b20:	463b      	mov	r3, r7
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	78db      	ldrb	r3, [r3, #3]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 838c 	bne.w	8004244 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	463b      	mov	r3, r7
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f240 8330 	bls.w	800419e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	463b      	mov	r3, r7
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	463b      	mov	r3, r7
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003b82:	463b      	mov	r3, r7
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	463b      	mov	r3, r7
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 819e 	beq.w	8003eec <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb4:	1d3a      	adds	r2, r7, #4
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	463b      	mov	r3, r7
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d17a      	bne.n	8003cba <USB_EPStartXfer+0x24e>
 8003bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc8:	1d3a      	adds	r2, r7, #4
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	440a      	add	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	463b      	mov	r3, r7
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	011a      	lsls	r2, r3, #4
 8003bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11a      	bne.n	8003c40 <USB_EPStartXfer+0x1d4>
 8003c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e062      	b.n	8003d06 <USB_EPStartXfer+0x29a>
 8003c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c44:	2b3e      	cmp	r3, #62	; 0x3e
 8003c46:	d819      	bhi.n	8003c7c <USB_EPStartXfer+0x210>
 8003c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <USB_EPStartXfer+0x1fc>
 8003c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c62:	3301      	adds	r3, #1
 8003c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	e044      	b.n	8003d06 <USB_EPStartXfer+0x29a>
 8003c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <USB_EPStartXfer+0x230>
 8003c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e025      	b.n	8003d06 <USB_EPStartXfer+0x29a>
 8003cba:	463b      	mov	r3, r7
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d120      	bne.n	8003d06 <USB_EPStartXfer+0x29a>
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	440a      	add	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	463b      	mov	r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	011a      	lsls	r2, r3, #4
 8003ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d06:	463b      	mov	r3, r7
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	895b      	ldrh	r3, [r3, #10]
 8003d0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d10:	463b      	mov	r3, r7
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6959      	ldr	r1, [r3, #20]
 8003d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d20:	1d38      	adds	r0, r7, #4
 8003d22:	6800      	ldr	r0, [r0, #0]
 8003d24:	f001 fad7 	bl	80052d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d28:	463b      	mov	r3, r7
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d32:	441a      	add	r2, r3
 8003d34:	463b      	mov	r3, r7
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	463b      	mov	r3, r7
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d909      	bls.n	8003d5e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d54:	1ad2      	subs	r2, r2, r3
 8003d56:	463b      	mov	r3, r7
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	621a      	str	r2, [r3, #32]
 8003d5c:	e008      	b.n	8003d70 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d5e:	463b      	mov	r3, r7
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003d68:	463b      	mov	r3, r7
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d70:	463b      	mov	r3, r7
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d17a      	bne.n	8003e70 <USB_EPStartXfer+0x404>
 8003d7a:	f107 0318 	add.w	r3, r7, #24
 8003d7e:	1d3a      	adds	r2, r7, #4
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f107 0318 	add.w	r3, r7, #24
 8003d94:	f107 0218 	add.w	r2, r7, #24
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	463b      	mov	r3, r7
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003db2:	f107 0314 	add.w	r3, r7, #20
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11a      	bne.n	8003df6 <USB_EPStartXfer+0x38a>
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e067      	b.n	8003ec6 <USB_EPStartXfer+0x45a>
 8003df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfc:	d819      	bhi.n	8003e32 <USB_EPStartXfer+0x3c6>
 8003dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <USB_EPStartXfer+0x3b2>
 8003e14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	029b      	lsls	r3, r3, #10
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e049      	b.n	8003ec6 <USB_EPStartXfer+0x45a>
 8003e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <USB_EPStartXfer+0x3e6>
 8003e48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	e02a      	b.n	8003ec6 <USB_EPStartXfer+0x45a>
 8003e70:	463b      	mov	r3, r7
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d125      	bne.n	8003ec6 <USB_EPStartXfer+0x45a>
 8003e7a:	f107 0320 	add.w	r3, r7, #32
 8003e7e:	1d3a      	adds	r2, r7, #4
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f107 0320 	add.w	r3, r7, #32
 8003e94:	f107 0220 	add.w	r2, r7, #32
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	011a      	lsls	r2, r3, #4
 8003ea6:	f107 0320 	add.w	r3, r7, #32
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	891b      	ldrh	r3, [r3, #8]
 8003ecc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6959      	ldr	r1, [r3, #20]
 8003ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ee0:	1d38      	adds	r0, r7, #4
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	f001 f9f7 	bl	80052d6 <USB_WritePMA>
 8003ee8:	f000 bcc6 	b.w	8004878 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003eec:	463b      	mov	r3, r7
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d164      	bne.n	8003fc0 <USB_EPStartXfer+0x554>
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0a:	4413      	add	r3, r2
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0e:	463b      	mov	r3, r7
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f18:	4413      	add	r3, r2
 8003f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d112      	bne.n	8003f4e <USB_EPStartXfer+0x4e2>
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	e057      	b.n	8003ffe <USB_EPStartXfer+0x592>
 8003f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f52:	2b3e      	cmp	r3, #62	; 0x3e
 8003f54:	d817      	bhi.n	8003f86 <USB_EPStartXfer+0x51a>
 8003f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <USB_EPStartXfer+0x50a>
 8003f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f70:	3301      	adds	r3, #1
 8003f72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	e03b      	b.n	8003ffe <USB_EPStartXfer+0x592>
 8003f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <USB_EPStartXfer+0x53a>
 8003f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	029b      	lsls	r3, r3, #10
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbc:	801a      	strh	r2, [r3, #0]
 8003fbe:	e01e      	b.n	8003ffe <USB_EPStartXfer+0x592>
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d119      	bne.n	8003ffe <USB_EPStartXfer+0x592>
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fde:	4413      	add	r3, r2
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	011a      	lsls	r2, r3, #4
 8003fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fec:	4413      	add	r3, r2
 8003fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ffe:	463b      	mov	r3, r7
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	891b      	ldrh	r3, [r3, #8]
 8004004:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004008:	463b      	mov	r3, r7
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6959      	ldr	r1, [r3, #20]
 800400e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004012:	b29b      	uxth	r3, r3
 8004014:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004018:	1d38      	adds	r0, r7, #4
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	f001 f95b 	bl	80052d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004020:	463b      	mov	r3, r7
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402a:	441a      	add	r2, r3
 800402c:	463b      	mov	r3, r7
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004032:	463b      	mov	r3, r7
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	463b      	mov	r3, r7
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	429a      	cmp	r2, r3
 8004040:	d909      	bls.n	8004056 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004042:	463b      	mov	r3, r7
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a1a      	ldr	r2, [r3, #32]
 8004048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404c:	1ad2      	subs	r2, r2, r3
 800404e:	463b      	mov	r3, r7
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	621a      	str	r2, [r3, #32]
 8004054:	e008      	b.n	8004068 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004060:	463b      	mov	r3, r7
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
 800406e:	463b      	mov	r3, r7
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d164      	bne.n	8004142 <USB_EPStartXfer+0x6d6>
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	4413      	add	r3, r2
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004090:	463b      	mov	r3, r7
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	011a      	lsls	r2, r3, #4
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	4413      	add	r3, r2
 800409c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d112      	bne.n	80040d0 <USB_EPStartXfer+0x664>
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	e054      	b.n	800417a <USB_EPStartXfer+0x70e>
 80040d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d4:	2b3e      	cmp	r3, #62	; 0x3e
 80040d6:	d817      	bhi.n	8004108 <USB_EPStartXfer+0x69c>
 80040d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <USB_EPStartXfer+0x68c>
 80040ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040f2:	3301      	adds	r3, #1
 80040f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	029b      	lsls	r3, r3, #10
 8004100:	b29a      	uxth	r2, r3
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e038      	b.n	800417a <USB_EPStartXfer+0x70e>
 8004108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <USB_EPStartXfer+0x6bc>
 800411e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004122:	3b01      	subs	r3, #1
 8004124:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800412c:	b29b      	uxth	r3, r3
 800412e:	029b      	lsls	r3, r3, #10
 8004130:	b29b      	uxth	r3, r3
 8004132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413a:	b29a      	uxth	r2, r3
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	e01b      	b.n	800417a <USB_EPStartXfer+0x70e>
 8004142:	463b      	mov	r3, r7
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d116      	bne.n	800417a <USB_EPStartXfer+0x70e>
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	4413      	add	r3, r2
 800415c:	643b      	str	r3, [r7, #64]	; 0x40
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	011a      	lsls	r2, r3, #4
 8004166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004168:	4413      	add	r3, r2
 800416a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004174:	b29a      	uxth	r2, r3
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	895b      	ldrh	r3, [r3, #10]
 8004180:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004184:	463b      	mov	r3, r7
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6959      	ldr	r1, [r3, #20]
 800418a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418e:	b29b      	uxth	r3, r3
 8004190:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004194:	1d38      	adds	r0, r7, #4
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	f001 f89d 	bl	80052d6 <USB_WritePMA>
 800419c:	e36c      	b.n	8004878 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	463b      	mov	r3, r7
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	463b      	mov	r3, r7
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80041d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041ec:	1d3b      	adds	r3, r7, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004200:	4413      	add	r3, r2
 8004202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004204:	463b      	mov	r3, r7
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	011a      	lsls	r2, r3, #4
 800420c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420e:	4413      	add	r3, r2
 8004210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004214:	65bb      	str	r3, [r7, #88]	; 0x58
 8004216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800421a:	b29a      	uxth	r2, r3
 800421c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800421e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004220:	463b      	mov	r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	891b      	ldrh	r3, [r3, #8]
 8004226:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800422a:	463b      	mov	r3, r7
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6959      	ldr	r1, [r3, #20]
 8004230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004234:	b29b      	uxth	r3, r3
 8004236:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800423a:	1d38      	adds	r0, r7, #4
 800423c:	6800      	ldr	r0, [r0, #0]
 800423e:	f001 f84a 	bl	80052d6 <USB_WritePMA>
 8004242:	e319      	b.n	8004878 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	463b      	mov	r3, r7
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	463b      	mov	r3, r7
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004288:	463b      	mov	r3, r7
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	463b      	mov	r3, r7
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	463b      	mov	r3, r7
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8162 	beq.w	800457a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042be:	463b      	mov	r3, r7
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d164      	bne.n	8004392 <USB_EPStartXfer+0x926>
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042dc:	4413      	add	r3, r2
 80042de:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e0:	463b      	mov	r3, r7
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	011a      	lsls	r2, r3, #4
 80042e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ea:	4413      	add	r3, r2
 80042ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042f0:	677b      	str	r3, [r7, #116]	; 0x74
 80042f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d112      	bne.n	8004320 <USB_EPStartXfer+0x8b4>
 80042fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004304:	b29a      	uxth	r2, r3
 8004306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004318:	b29a      	uxth	r2, r3
 800431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	e057      	b.n	80043d0 <USB_EPStartXfer+0x964>
 8004320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004324:	2b3e      	cmp	r3, #62	; 0x3e
 8004326:	d817      	bhi.n	8004358 <USB_EPStartXfer+0x8ec>
 8004328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <USB_EPStartXfer+0x8dc>
 800433e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004342:	3301      	adds	r3, #1
 8004344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004348:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800434c:	b29b      	uxth	r3, r3
 800434e:	029b      	lsls	r3, r3, #10
 8004350:	b29a      	uxth	r2, r3
 8004352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e03b      	b.n	80043d0 <USB_EPStartXfer+0x964>
 8004358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <USB_EPStartXfer+0x90c>
 800436e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004372:	3b01      	subs	r3, #1
 8004374:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004378:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800437c:	b29b      	uxth	r3, r3
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	b29b      	uxth	r3, r3
 8004382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438a:	b29a      	uxth	r2, r3
 800438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	e01e      	b.n	80043d0 <USB_EPStartXfer+0x964>
 8004392:	463b      	mov	r3, r7
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	785b      	ldrb	r3, [r3, #1]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d119      	bne.n	80043d0 <USB_EPStartXfer+0x964>
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ac:	4413      	add	r3, r2
 80043ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b2:	463b      	mov	r3, r7
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	011a      	lsls	r2, r3, #4
 80043ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043be:	4413      	add	r3, r2
 80043c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	895b      	ldrh	r3, [r3, #10]
 80043d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6959      	ldr	r1, [r3, #20]
 80043e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80043ea:	1d38      	adds	r0, r7, #4
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f000 ff72 	bl	80052d6 <USB_WritePMA>
          ep->xfer_buff += len;
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043fc:	441a      	add	r2, r3
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004404:	463b      	mov	r3, r7
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	463b      	mov	r3, r7
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d909      	bls.n	8004428 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004414:	463b      	mov	r3, r7
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	621a      	str	r2, [r3, #32]
 8004426:	e008      	b.n	800443a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004428:	463b      	mov	r3, r7
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800443a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 821a 	beq.w	8004878 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d164      	bne.n	8004518 <USB_EPStartXfer+0xaac>
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	66bb      	str	r3, [r7, #104]	; 0x68
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445c:	b29b      	uxth	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004462:	4413      	add	r3, r2
 8004464:	66bb      	str	r3, [r7, #104]	; 0x68
 8004466:	463b      	mov	r3, r7
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	011a      	lsls	r2, r3, #4
 800446e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004470:	4413      	add	r3, r2
 8004472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004476:	667b      	str	r3, [r7, #100]	; 0x64
 8004478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d112      	bne.n	80044a6 <USB_EPStartXfer+0xa3a>
 8004480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800448a:	b29a      	uxth	r2, r3
 800448c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e057      	b.n	8004556 <USB_EPStartXfer+0xaea>
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044aa:	2b3e      	cmp	r3, #62	; 0x3e
 80044ac:	d817      	bhi.n	80044de <USB_EPStartXfer+0xa72>
 80044ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <USB_EPStartXfer+0xa62>
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c8:	3301      	adds	r3, #1
 80044ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e03b      	b.n	8004556 <USB_EPStartXfer+0xaea>
 80044de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <USB_EPStartXfer+0xa92>
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e01e      	b.n	8004556 <USB_EPStartXfer+0xaea>
 8004518:	463b      	mov	r3, r7
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d119      	bne.n	8004556 <USB_EPStartXfer+0xaea>
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	673b      	str	r3, [r7, #112]	; 0x70
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004536:	4413      	add	r3, r2
 8004538:	673b      	str	r3, [r7, #112]	; 0x70
 800453a:	463b      	mov	r3, r7
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	011a      	lsls	r2, r3, #4
 8004542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004544:	4413      	add	r3, r2
 8004546:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800454a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800454c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004550:	b29a      	uxth	r2, r3
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004556:	463b      	mov	r3, r7
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	891b      	ldrh	r3, [r3, #8]
 800455c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004560:	463b      	mov	r3, r7
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6959      	ldr	r1, [r3, #20]
 8004566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800456a:	b29b      	uxth	r3, r3
 800456c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004570:	1d38      	adds	r0, r7, #4
 8004572:	6800      	ldr	r0, [r0, #0]
 8004574:	f000 feaf 	bl	80052d6 <USB_WritePMA>
 8004578:	e17e      	b.n	8004878 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d16f      	bne.n	8004664 <USB_EPStartXfer+0xbf8>
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004594:	b29b      	uxth	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800459c:	4413      	add	r3, r2
 800459e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045a2:	463b      	mov	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	011a      	lsls	r2, r3, #4
 80045aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <USB_EPStartXfer+0xb82>
 80045c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e05f      	b.n	80046ae <USB_EPStartXfer+0xc42>
 80045ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f2:	2b3e      	cmp	r3, #62	; 0x3e
 80045f4:	d818      	bhi.n	8004628 <USB_EPStartXfer+0xbbc>
 80045f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <USB_EPStartXfer+0xbaa>
 800460c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004610:	3301      	adds	r3, #1
 8004612:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004616:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29a      	uxth	r2, r3
 8004620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	e042      	b.n	80046ae <USB_EPStartXfer+0xc42>
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <USB_EPStartXfer+0xbdc>
 800463e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004642:	3b01      	subs	r3, #1
 8004644:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004648:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800464c:	b29b      	uxth	r3, r3
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	b29b      	uxth	r3, r3
 8004652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465a:	b29a      	uxth	r2, r3
 800465c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e024      	b.n	80046ae <USB_EPStartXfer+0xc42>
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d11f      	bne.n	80046ae <USB_EPStartXfer+0xc42>
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467e:	b29b      	uxth	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004686:	4413      	add	r3, r2
 8004688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	011a      	lsls	r2, r3, #4
 8004694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004698:	4413      	add	r3, r2
 800469a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	891b      	ldrh	r3, [r3, #8]
 80046b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6959      	ldr	r1, [r3, #20]
 80046be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80046c8:	1d38      	adds	r0, r7, #4
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	f000 fe03 	bl	80052d6 <USB_WritePMA>
          ep->xfer_buff += len;
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046da:	441a      	add	r2, r3
 80046dc:	463b      	mov	r3, r7
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80046e2:	463b      	mov	r3, r7
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	463b      	mov	r3, r7
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d909      	bls.n	8004706 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046fc:	1ad2      	subs	r2, r2, r3
 80046fe:	463b      	mov	r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	621a      	str	r2, [r3, #32]
 8004704:	e008      	b.n	8004718 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2200      	movs	r2, #0
 8004716:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80ab 	beq.w	8004878 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d16f      	bne.n	8004814 <USB_EPStartXfer+0xda8>
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474c:	4413      	add	r3, r2
 800474e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004752:	463b      	mov	r3, r7
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	011a      	lsls	r2, r3, #4
 800475a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800475e:	4413      	add	r3, r2
 8004760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <USB_EPStartXfer+0xd32>
 8004770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800477c:	b29a      	uxth	r2, r3
 800477e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004794:	b29a      	uxth	r2, r3
 8004796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	e05b      	b.n	8004856 <USB_EPStartXfer+0xdea>
 800479e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a2:	2b3e      	cmp	r3, #62	; 0x3e
 80047a4:	d818      	bhi.n	80047d8 <USB_EPStartXfer+0xd6c>
 80047a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80047b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <USB_EPStartXfer+0xd5a>
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c0:	3301      	adds	r3, #1
 80047c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	029b      	lsls	r3, r3, #10
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e03e      	b.n	8004856 <USB_EPStartXfer+0xdea>
 80047d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80047e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <USB_EPStartXfer+0xd8c>
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	3b01      	subs	r3, #1
 80047f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	029b      	lsls	r3, r3, #10
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e020      	b.n	8004856 <USB_EPStartXfer+0xdea>
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d11b      	bne.n	8004856 <USB_EPStartXfer+0xdea>
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800482e:	4413      	add	r3, r2
 8004830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	011a      	lsls	r2, r3, #4
 800483c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004840:	4413      	add	r3, r2
 8004842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800484a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484e:	b29a      	uxth	r2, r3
 8004850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004854:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004856:	463b      	mov	r3, r7
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	895b      	ldrh	r3, [r3, #10]
 800485c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6959      	ldr	r1, [r3, #20]
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	b29b      	uxth	r3, r3
 800486c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004870:	1d38      	adds	r0, r7, #4
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	f000 fd2f 	bl	80052d6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	463b      	mov	r3, r7
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f107 020a 	add.w	r2, r7, #10
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	8013      	strh	r3, [r2, #0]
 8004898:	f107 030a 	add.w	r3, r7, #10
 800489c:	f107 020a 	add.w	r2, r7, #10
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	f082 0210 	eor.w	r2, r2, #16
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	f107 030a 	add.w	r3, r7, #10
 80048ac:	f107 020a 	add.w	r2, r7, #10
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	f082 0220 	eor.w	r2, r2, #32
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	463b      	mov	r3, r7
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	f107 030a 	add.w	r3, r7, #10
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
 80048e0:	e3b5      	b.n	800504e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80048e2:	463b      	mov	r3, r7
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	7b1b      	ldrb	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 8090 	bne.w	8004a0e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80048ee:	463b      	mov	r3, r7
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	463b      	mov	r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90e      	bls.n	800491c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004908:	463b      	mov	r3, r7
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	463b      	mov	r3, r7
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	619a      	str	r2, [r3, #24]
 800491a:	e008      	b.n	800492e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800491c:	463b      	mov	r3, r7
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004926:	463b      	mov	r3, r7
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004946:	4413      	add	r3, r2
 8004948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800494c:	463b      	mov	r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	011a      	lsls	r2, r3, #4
 8004954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004958:	4413      	add	r3, r2
 800495a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800495e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <USB_EPStartXfer+0xf2c>
 800496a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004976:	b29a      	uxth	r2, r3
 8004978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29a      	uxth	r2, r3
 8004990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	e32c      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
 8004998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800499c:	2b3e      	cmp	r3, #62	; 0x3e
 800499e:	d818      	bhi.n	80049d2 <USB_EPStartXfer+0xf66>
 80049a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <USB_EPStartXfer+0xf54>
 80049b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ba:	3301      	adds	r3, #1
 80049bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e30f      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
 80049d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <USB_EPStartXfer+0xf86>
 80049e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ec:	3b01      	subs	r3, #1
 80049ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80049f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	029b      	lsls	r3, r3, #10
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a0a:	801a      	strh	r2, [r3, #0]
 8004a0c:	e2f1      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	78db      	ldrb	r3, [r3, #3]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f040 818f 	bne.w	8004d38 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d175      	bne.n	8004b10 <USB_EPStartXfer+0x10a4>
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a2c:	1d3b      	adds	r3, r7, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a42:	463b      	mov	r3, r7
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	011a      	lsls	r2, r3, #4
 8004a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a4e:	4413      	add	r3, r2
 8004a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a58:	463b      	mov	r3, r7
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <USB_EPStartXfer+0x1024>
 8004a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e065      	b.n	8004b5c <USB_EPStartXfer+0x10f0>
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b3e      	cmp	r3, #62	; 0x3e
 8004a98:	d81a      	bhi.n	8004ad0 <USB_EPStartXfer+0x1064>
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <USB_EPStartXfer+0x1052>
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e045      	b.n	8004b5c <USB_EPStartXfer+0x10f0>
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <USB_EPStartXfer+0x1088>
 8004aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aee:	3b01      	subs	r3, #1
 8004af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	029b      	lsls	r3, r3, #10
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e025      	b.n	8004b5c <USB_EPStartXfer+0x10f0>
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d120      	bne.n	8004b5c <USB_EPStartXfer+0x10f0>
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b32:	4413      	add	r3, r2
 8004b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	011a      	lsls	r2, r3, #4
 8004b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4e:	463b      	mov	r3, r7
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b64:	463b      	mov	r3, r7
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d175      	bne.n	8004c5a <USB_EPStartXfer+0x11ee>
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b86:	4413      	add	r3, r2
 8004b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b98:	4413      	add	r3, r2
 8004b9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <USB_EPStartXfer+0x116e>
 8004bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e061      	b.n	8004c9e <USB_EPStartXfer+0x1232>
 8004bda:	463b      	mov	r3, r7
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b3e      	cmp	r3, #62	; 0x3e
 8004be2:	d81a      	bhi.n	8004c1a <USB_EPStartXfer+0x11ae>
 8004be4:	463b      	mov	r3, r7
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <USB_EPStartXfer+0x119c>
 8004bfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c02:	3301      	adds	r3, #1
 8004c04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	e041      	b.n	8004c9e <USB_EPStartXfer+0x1232>
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c26:	463b      	mov	r3, r7
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <USB_EPStartXfer+0x11d2>
 8004c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e021      	b.n	8004c9e <USB_EPStartXfer+0x1232>
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11c      	bne.n	8004c9e <USB_EPStartXfer+0x1232>
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c74:	4413      	add	r3, r2
 8004c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 81a4 	beq.w	8004ff2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004cbe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <USB_EPStartXfer+0x126a>
 8004cca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10d      	bne.n	8004cf2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004cd6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 8187 	bne.w	8004ff2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ce4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8180 	bne.w	8004ff2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004d10:	1d3b      	adds	r3, r7, #4
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	463b      	mov	r3, r7
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
 8004d36:	e15c      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	78db      	ldrb	r3, [r3, #3]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 8155 	bne.w	8004fee <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d90e      	bls.n	8004d72 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d68:	1ad2      	subs	r2, r2, r3
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	619a      	str	r2, [r3, #24]
 8004d70:	e008      	b.n	8004d84 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004d72:	463b      	mov	r3, r7
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d16f      	bne.n	8004e6e <USB_EPStartXfer+0x1402>
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d96:	1d3b      	adds	r3, r7, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004da6:	4413      	add	r3, r2
 8004da8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004dac:	463b      	mov	r3, r7
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	011a      	lsls	r2, r3, #4
 8004db4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d116      	bne.n	8004df8 <USB_EPStartXfer+0x138c>
 8004dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e05f      	b.n	8004eb8 <USB_EPStartXfer+0x144c>
 8004df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfe:	d818      	bhi.n	8004e32 <USB_EPStartXfer+0x13c6>
 8004e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <USB_EPStartXfer+0x13b4>
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e042      	b.n	8004eb8 <USB_EPStartXfer+0x144c>
 8004e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <USB_EPStartXfer+0x13e6>
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	e024      	b.n	8004eb8 <USB_EPStartXfer+0x144c>
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d11f      	bne.n	8004eb8 <USB_EPStartXfer+0x144c>
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e80:	1d3b      	adds	r3, r7, #4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	4413      	add	r3, r2
 8004e92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	011a      	lsls	r2, r3, #4
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d16f      	bne.n	8004faa <USB_EPStartXfer+0x153e>
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <USB_EPStartXfer+0x14c8>
 8004f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e05e      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
 8004f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f38:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3a:	d818      	bhi.n	8004f6e <USB_EPStartXfer+0x1502>
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <USB_EPStartXfer+0x14f0>
 8004f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f56:	3301      	adds	r3, #1
 8004f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	029b      	lsls	r3, r3, #10
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e041      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
 8004f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <USB_EPStartXfer+0x1522>
 8004f84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	e023      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11e      	bne.n	8004ff2 <USB_EPStartXfer+0x1586>
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e001      	b.n	8004ff2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02e      	b.n	8005050 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005010:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005014:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005018:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800501c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005020:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005024:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005028:	1d3b      	adds	r3, r7, #4
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005082:	81bb      	strh	r3, [r7, #12]
 8005084:	89bb      	ldrh	r3, [r7, #12]
 8005086:	f083 0310 	eor.w	r3, r3, #16
 800508a:	81bb      	strh	r3, [r7, #12]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	89bb      	ldrh	r3, [r7, #12]
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]
 80050ac:	e01f      	b.n	80050ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	81fb      	strh	r3, [r7, #14]
 80050c6:	89fb      	ldrh	r3, [r7, #14]
 80050c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050cc:	81fb      	strh	r3, [r7, #14]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	89fb      	ldrh	r3, [r7, #14]
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	7b1b      	ldrb	r3, [r3, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 809d 	bne.w	8005248 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04c      	beq.n	80051b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	823b      	strh	r3, [r7, #16]
 8005124:	8a3b      	ldrh	r3, [r7, #16]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01b      	beq.n	8005166 <USB_EPClearStall+0x6c>
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	81fb      	strh	r3, [r7, #14]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d06c      	beq.n	8005248 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005184:	81bb      	strh	r3, [r7, #12]
 8005186:	89bb      	ldrh	r3, [r7, #12]
 8005188:	f083 0320 	eor.w	r3, r3, #32
 800518c:	81bb      	strh	r3, [r7, #12]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
 80051ae:	e04b      	b.n	8005248 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	82fb      	strh	r3, [r7, #22]
 80051be:	8afb      	ldrh	r3, [r7, #22]
 80051c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <USB_EPClearStall+0x106>
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	82bb      	strh	r3, [r7, #20]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	8abb      	ldrh	r3, [r7, #20]
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	827b      	strh	r3, [r7, #18]
 8005218:	8a7b      	ldrh	r3, [r7, #18]
 800521a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800521e:	827b      	strh	r3, [r7, #18]
 8005220:	8a7b      	ldrh	r3, [r7, #18]
 8005222:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005226:	827b      	strh	r3, [r7, #18]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	8a7b      	ldrh	r3, [r7, #18]
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80052b4:	68fb      	ldr	r3, [r7, #12]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b08d      	sub	sp, #52	; 0x34
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	4611      	mov	r1, r2
 80052e2:	461a      	mov	r2, r3
 80052e4:	460b      	mov	r3, r1
 80052e6:	80fb      	strh	r3, [r7, #6]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80052ec:	88bb      	ldrh	r3, [r7, #4]
 80052ee:	3301      	adds	r3, #1
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	005a      	lsls	r2, r3, #1
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530e:	e01e      	b.n	800534e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	3301      	adds	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	b29b      	uxth	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	b29a      	uxth	r2, r3
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	3302      	adds	r3, #2
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	3302      	adds	r3, #2
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	3301      	adds	r3, #1
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	3b01      	subs	r3, #1
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1dd      	bne.n	8005310 <USB_WritePMA+0x3a>
  }
}
 8005354:	bf00      	nop
 8005356:	3734      	adds	r7, #52	; 0x34
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800535e:	b480      	push	{r7}
 8005360:	b08b      	sub	sp, #44	; 0x2c
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	4611      	mov	r1, r2
 800536a:	461a      	mov	r2, r3
 800536c:	460b      	mov	r3, r1
 800536e:	80fb      	strh	r3, [r7, #6]
 8005370:	4613      	mov	r3, r2
 8005372:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005374:	88bb      	ldrh	r3, [r7, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	b29b      	uxth	r3, r3
 800537a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	005a      	lsls	r2, r3, #1
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005390:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
 8005396:	e01b      	b.n	80053d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	3302      	adds	r3, #2
 80053a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	3302      	adds	r3, #2
 80053c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	3b01      	subs	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e0      	bne.n	8005398 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80053d6:	88bb      	ldrh	r3, [r7, #4]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	701a      	strb	r2, [r3, #0]
  }
}
 80053f2:	bf00      	nop
 80053f4:	372c      	adds	r7, #44	; 0x2c
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005408:	2304      	movs	r3, #4
 800540a:	2203      	movs	r2, #3
 800540c:	2181      	movs	r1, #129	; 0x81
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fc75 	bl	8006cfe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800541a:	2010      	movs	r0, #16
 800541c:	f001 fd84 	bl	8006f28 <USBD_static_malloc>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005432:	2302      	movs	r3, #2
 8005434:	e005      	b.n	8005442 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	2200      	movs	r2, #0
 800543e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005456:	2181      	movs	r1, #129	; 0x81
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fc76 	bl	8006d4a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fd63 	bl	8006f40 <USBD_static_free>
    pdev->pClassData = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d045      	beq.n	8005546 <USBD_HID_Setup+0xba>
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	f040 80d3 	bne.w	8005666 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	3b02      	subs	r3, #2
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d835      	bhi.n	8005536 <USBD_HID_Setup+0xaa>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <USBD_HID_Setup+0x44>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005527 	.word	0x08005527
 80054d4:	08005507 	.word	0x08005507
 80054d8:	08005537 	.word	0x08005537
 80054dc:	08005537 	.word	0x08005537
 80054e0:	08005537 	.word	0x08005537
 80054e4:	08005537 	.word	0x08005537
 80054e8:	08005537 	.word	0x08005537
 80054ec:	08005537 	.word	0x08005537
 80054f0:	08005515 	.word	0x08005515
 80054f4:	080054f9 	.word	0x080054f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	885b      	ldrh	r3, [r3, #2]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	601a      	str	r2, [r3, #0]
          break;
 8005504:	e01e      	b.n	8005544 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2201      	movs	r2, #1
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f937 	bl	8006780 <USBD_CtlSendData>
          break;
 8005512:	e017      	b.n	8005544 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	885b      	ldrh	r3, [r3, #2]
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	b29b      	uxth	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]
          break;
 8005524:	e00e      	b.n	8005544 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3304      	adds	r3, #4
 800552a:	2201      	movs	r2, #1
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f926 	bl	8006780 <USBD_CtlSendData>
          break;
 8005534:	e006      	b.n	8005544 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 f8b7 	bl	80066ac <USBD_CtlError>
          ret = USBD_FAIL;
 800553e:	2302      	movs	r3, #2
 8005540:	75fb      	strb	r3, [r7, #23]
          break;
 8005542:	bf00      	nop
      }
      break;
 8005544:	e096      	b.n	8005674 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b0b      	cmp	r3, #11
 800554c:	f200 8083 	bhi.w	8005656 <USBD_HID_Setup+0x1ca>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <USBD_HID_Setup+0xcc>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005589 	.word	0x08005589
 800555c:	08005657 	.word	0x08005657
 8005560:	08005657 	.word	0x08005657
 8005564:	08005657 	.word	0x08005657
 8005568:	08005657 	.word	0x08005657
 800556c:	08005657 	.word	0x08005657
 8005570:	080055b1 	.word	0x080055b1
 8005574:	08005657 	.word	0x08005657
 8005578:	08005657 	.word	0x08005657
 800557c:	08005657 	.word	0x08005657
 8005580:	08005609 	.word	0x08005609
 8005584:	08005631 	.word	0x08005631
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005592:	f107 030e 	add.w	r3, r7, #14
 8005596:	2202      	movs	r2, #2
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 f8f0 	bl	8006780 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055a0:	e060      	b.n	8005664 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 f881 	bl	80066ac <USBD_CtlError>
            ret = USBD_FAIL;
 80055aa:	2302      	movs	r3, #2
 80055ac:	75fb      	strb	r3, [r7, #23]
          break;
 80055ae:	e059      	b.n	8005664 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	885b      	ldrh	r3, [r3, #2]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b22      	cmp	r3, #34	; 0x22
 80055ba:	d108      	bne.n	80055ce <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	88db      	ldrh	r3, [r3, #6]
 80055c0:	2b3f      	cmp	r3, #63	; 0x3f
 80055c2:	bf28      	it	cs
 80055c4:	233f      	movcs	r3, #63	; 0x3f
 80055c6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <USBD_HID_Setup+0x1f4>)
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e015      	b.n	80055fa <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	885b      	ldrh	r3, [r3, #2]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b21      	cmp	r3, #33	; 0x21
 80055d8:	d108      	bne.n	80055ec <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80055da:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <USBD_HID_Setup+0x1f8>)
 80055dc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	bf28      	it	cs
 80055e6:	2309      	movcs	r3, #9
 80055e8:	83fb      	strh	r3, [r7, #30]
 80055ea:	e006      	b.n	80055fa <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f85c 	bl	80066ac <USBD_CtlError>
            ret = USBD_FAIL;
 80055f4:	2302      	movs	r3, #2
 80055f6:	75fb      	strb	r3, [r7, #23]
            break;
 80055f8:	e034      	b.n	8005664 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80055fa:	8bfb      	ldrh	r3, [r7, #30]
 80055fc:	461a      	mov	r2, r3
 80055fe:	69b9      	ldr	r1, [r7, #24]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f8bd 	bl	8006780 <USBD_CtlSendData>
          break;
 8005606:	e02d      	b.n	8005664 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800560e:	2b03      	cmp	r3, #3
 8005610:	d107      	bne.n	8005622 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3308      	adds	r3, #8
 8005616:	2201      	movs	r2, #1
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 f8b0 	bl	8006780 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005620:	e020      	b.n	8005664 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 f841 	bl	80066ac <USBD_CtlError>
            ret = USBD_FAIL;
 800562a:	2302      	movs	r3, #2
 800562c:	75fb      	strb	r3, [r7, #23]
          break;
 800562e:	e019      	b.n	8005664 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005636:	2b03      	cmp	r3, #3
 8005638:	d106      	bne.n	8005648 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	885b      	ldrh	r3, [r3, #2]
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005646:	e00d      	b.n	8005664 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 f82e 	bl	80066ac <USBD_CtlError>
            ret = USBD_FAIL;
 8005650:	2302      	movs	r3, #2
 8005652:	75fb      	strb	r3, [r7, #23]
          break;
 8005654:	e006      	b.n	8005664 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 f827 	bl	80066ac <USBD_CtlError>
          ret = USBD_FAIL;
 800565e:	2302      	movs	r3, #2
 8005660:	75fb      	strb	r3, [r7, #23]
          break;
 8005662:	bf00      	nop
      }
      break;
 8005664:	e006      	b.n	8005674 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f81f 	bl	80066ac <USBD_CtlError>
      ret = USBD_FAIL;
 800566e:	2302      	movs	r3, #2
 8005670:	75fb      	strb	r3, [r7, #23]
      break;
 8005672:	bf00      	nop
  }

  return ret;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	200000c8 	.word	0x200000c8
 8005684:	200000b0 	.word	0x200000b0

08005688 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d10c      	bne.n	80056c2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	7b1b      	ldrb	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d108      	bne.n	80056c2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2201      	movs	r2, #1
 80056b4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	2181      	movs	r1, #129	; 0x81
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f001 fbec 	bl	8006e9a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2222      	movs	r2, #34	; 0x22
 80056d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80056da:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000044 	.word	0x20000044

080056ec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2222      	movs	r2, #34	; 0x22
 80056f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80056fa:	4b03      	ldr	r3, [pc, #12]	; (8005708 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000068 	.word	0x20000068

0800570c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2222      	movs	r2, #34	; 0x22
 8005718:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800571a:	4b03      	ldr	r3, [pc, #12]	; (8005728 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	2000008c 	.word	0x2000008c

0800572c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573e:	2200      	movs	r2, #0
 8005740:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr
	...

08005750 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	220a      	movs	r2, #10
 800575c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800575e:	4b03      	ldr	r3, [pc, #12]	; (800576c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200000bc 	.word	0x200000bc

08005770 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005784:	2302      	movs	r3, #2
 8005786:	e01a      	b.n	80057be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	79fa      	ldrb	r2, [r7, #7]
 80057b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f001 fa3e 	bl	8006c38 <USBD_LL_Init>

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d006      	beq.n	80057e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e001      	b.n	80057ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057e8:	2302      	movs	r3, #2
 80057ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fa61 	bl	8006cc8 <USBD_LL_Start>

  return USBD_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005830:	2302      	movs	r3, #2
 8005832:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	4611      	mov	r1, r2
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	4611      	mov	r1, r2
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3

  return USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 feca 	bl	8006634 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d00c      	beq.n	80058de <USBD_LL_SetupStage+0x56>
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d302      	bcc.n	80058ce <USBD_LL_SetupStage+0x46>
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d010      	beq.n	80058ee <USBD_LL_SetupStage+0x66>
 80058cc:	e017      	b.n	80058fe <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9ca 	bl	8005c70 <USBD_StdDevReq>
      break;
 80058dc:	e01a      	b.n	8005914 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa2c 	bl	8005d44 <USBD_StdItfReq>
      break;
 80058ec:	e012      	b.n	8005914 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa6a 	bl	8005dd0 <USBD_StdEPReq>
      break;
 80058fc:	e00a      	b.n	8005914 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005908:	b2db      	uxtb	r3, r3
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fa3b 	bl	8006d88 <USBD_LL_StallEP>
      break;
 8005912:	bf00      	nop
  }

  return USBD_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b086      	sub	sp, #24
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	460b      	mov	r3, r1
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d14b      	bne.n	80059ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005938:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005940:	2b03      	cmp	r3, #3
 8005942:	d134      	bne.n	80059ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d919      	bls.n	8005984 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005966:	429a      	cmp	r2, r3
 8005968:	d203      	bcs.n	8005972 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800596e:	b29b      	uxth	r3, r3
 8005970:	e002      	b.n	8005978 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 ff2d 	bl	80067dc <USBD_CtlContinueRx>
 8005982:	e038      	b.n	80059f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005996:	2b03      	cmp	r3, #3
 8005998:	d105      	bne.n	80059a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 ff2a 	bl	8006800 <USBD_CtlSendStatus>
 80059ac:	e023      	b.n	80059f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	d11e      	bne.n	80059f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80059c0:	2100      	movs	r1, #0
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f001 f9e0 	bl	8006d88 <USBD_LL_StallEP>
 80059c8:	e015      	b.n	80059f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d108      	bne.n	80059f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	7afa      	ldrb	r2, [r7, #11]
 80059ea:	4611      	mov	r1, r2
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	4798      	blx	r3
 80059f0:	e001      	b.n	80059f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e000      	b.n	80059f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d17f      	bne.n	8005b14 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3314      	adds	r3, #20
 8005a18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d15c      	bne.n	8005ade <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d915      	bls.n	8005a5c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 feb5 	bl	80067b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2200      	movs	r2, #0
 8005a52:	2100      	movs	r1, #0
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f001 fa43 	bl	8006ee0 <USBD_LL_PrepareReceive>
 8005a5a:	e04e      	b.n	8005afa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	6912      	ldr	r2, [r2, #16]
 8005a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a68:	fb02 f201 	mul.w	r2, r2, r1
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11c      	bne.n	8005aac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d316      	bcc.n	8005aac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d20f      	bcs.n	8005aac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2100      	movs	r1, #0
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fe91 	bl	80067b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f001 fa1b 	bl	8006ee0 <USBD_LL_PrepareReceive>
 8005aaa:	e026      	b.n	8005afa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d105      	bne.n	8005ace <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 f959 	bl	8006d88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fea5 	bl	8006826 <USBD_CtlReceiveStatus>
 8005adc:	e00d      	b.n	8005afa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d004      	beq.n	8005af2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f001 f947 	bl	8006d88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d11d      	bne.n	8005b40 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fe83 	bl	8005810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b12:	e015      	b.n	8005b40 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d108      	bne.n	8005b3c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	7afa      	ldrb	r2, [r7, #11]
 8005b34:	4611      	mov	r1, r2
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	4798      	blx	r3
 8005b3a:	e001      	b.n	8005b40 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e000      	b.n	8005b42 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b52:	2340      	movs	r3, #64	; 0x40
 8005b54:	2200      	movs	r2, #0
 8005b56:	2100      	movs	r1, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 f8d0 	bl	8006cfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2240      	movs	r2, #64	; 0x40
 8005b6a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b6e:	2340      	movs	r3, #64	; 0x40
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 f8c2 	bl	8006cfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2240      	movs	r2, #64	; 0x40
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6852      	ldr	r2, [r2, #4]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
  }

  return USBD_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2204      	movs	r2, #4
 8005c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d105      	bne.n	8005c30 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d10b      	bne.n	8005c66 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d004      	beq.n	8005c94 <USBD_StdDevReq+0x24>
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d002      	beq.n	8005c94 <USBD_StdDevReq+0x24>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <USBD_StdDevReq+0x34>
 8005c92:	e04c      	b.n	8005d2e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
      break;
 8005ca2:	e049      	b.n	8005d38 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b09      	cmp	r3, #9
 8005caa:	d83a      	bhi.n	8005d22 <USBD_StdDevReq+0xb2>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_StdDevReq+0x44>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005d19 	.word	0x08005d19
 8005cbc:	08005d23 	.word	0x08005d23
 8005cc0:	08005d0f 	.word	0x08005d0f
 8005cc4:	08005d23 	.word	0x08005d23
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005d23 	.word	0x08005d23
 8005cd4:	08005cfb 	.word	0x08005cfb
 8005cd8:	08005cf1 	.word	0x08005cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9d4 	bl	800608c <USBD_GetDescriptor>
          break;
 8005ce4:	e022      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb37 	bl	800635c <USBD_SetAddress>
          break;
 8005cee:	e01d      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb74 	bl	80063e0 <USBD_SetConfig>
          break;
 8005cf8:	e018      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fbfd 	bl	80064fc <USBD_GetConfig>
          break;
 8005d02:	e013      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc2c 	bl	8006564 <USBD_GetStatus>
          break;
 8005d0c:	e00e      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fc5a 	bl	80065ca <USBD_SetFeature>
          break;
 8005d16:	e009      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fc69 	bl	80065f2 <USBD_ClrFeature>
          break;
 8005d20:	e004      	b.n	8005d2c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcc1 	bl	80066ac <USBD_CtlError>
          break;
 8005d2a:	bf00      	nop
      }
      break;
 8005d2c:	e004      	b.n	8005d38 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fcbb 	bl	80066ac <USBD_CtlError>
      break;
 8005d36:	bf00      	nop
  }

  return ret;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop

08005d44 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d003      	beq.n	8005d66 <USBD_StdItfReq+0x22>
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d001      	beq.n	8005d66 <USBD_StdItfReq+0x22>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d12a      	bne.n	8005dbc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d81d      	bhi.n	8005dae <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	889b      	ldrh	r3, [r3, #4]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d813      	bhi.n	8005da4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	88db      	ldrh	r3, [r3, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <USBD_StdItfReq+0x74>
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10d      	bne.n	8005db8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fd2f 	bl	8006800 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005da2:	e009      	b.n	8005db8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fc80 	bl	80066ac <USBD_CtlError>
          break;
 8005dac:	e004      	b.n	8005db8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fc7b 	bl	80066ac <USBD_CtlError>
          break;
 8005db6:	e000      	b.n	8005dba <USBD_StdItfReq+0x76>
          break;
 8005db8:	bf00      	nop
      }
      break;
 8005dba:	e004      	b.n	8005dc6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fc74 	bl	80066ac <USBD_CtlError>
      break;
 8005dc4:	bf00      	nop
  }

  return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	889b      	ldrh	r3, [r3, #4]
 8005de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d004      	beq.n	8005dfa <USBD_StdEPReq+0x2a>
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d002      	beq.n	8005dfa <USBD_StdEPReq+0x2a>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <USBD_StdEPReq+0x3a>
 8005df8:	e13d      	b.n	8006076 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
      break;
 8005e08:	e13a      	b.n	8006080 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d10a      	bne.n	8005e2c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	e12a      	b.n	8006082 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d03e      	beq.n	8005eb2 <USBD_StdEPReq+0xe2>
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d002      	beq.n	8005e3e <USBD_StdEPReq+0x6e>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d070      	beq.n	8005f1e <USBD_StdEPReq+0x14e>
 8005e3c:	e115      	b.n	800606a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d002      	beq.n	8005e4e <USBD_StdEPReq+0x7e>
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d015      	beq.n	8005e78 <USBD_StdEPReq+0xa8>
 8005e4c:	e02b      	b.n	8005ea6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <USBD_StdEPReq+0x9e>
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	2b80      	cmp	r3, #128	; 0x80
 8005e58:	d009      	beq.n	8005e6e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 ff92 	bl	8006d88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e64:	2180      	movs	r1, #128	; 0x80
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ff8e 	bl	8006d88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e6c:	e020      	b.n	8005eb0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fc1b 	bl	80066ac <USBD_CtlError>
              break;
 8005e76:	e01b      	b.n	8005eb0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	885b      	ldrh	r3, [r3, #2]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10e      	bne.n	8005e9e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <USBD_StdEPReq+0xce>
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	2b80      	cmp	r3, #128	; 0x80
 8005e8a:	d008      	beq.n	8005e9e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	88db      	ldrh	r3, [r3, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 ff75 	bl	8006d88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fcae 	bl	8006800 <USBD_CtlSendStatus>

              break;
 8005ea4:	e004      	b.n	8005eb0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fbff 	bl	80066ac <USBD_CtlError>
              break;
 8005eae:	bf00      	nop
          }
          break;
 8005eb0:	e0e0      	b.n	8006074 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d002      	beq.n	8005ec2 <USBD_StdEPReq+0xf2>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d015      	beq.n	8005eec <USBD_StdEPReq+0x11c>
 8005ec0:	e026      	b.n	8005f10 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <USBD_StdEPReq+0x112>
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d009      	beq.n	8005ee2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff58 	bl	8006d88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 ff54 	bl	8006d88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ee0:	e01c      	b.n	8005f1c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fbe1 	bl	80066ac <USBD_CtlError>
              break;
 8005eea:	e017      	b.n	8005f1c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	885b      	ldrh	r3, [r3, #2]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d112      	bne.n	8005f1a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 ff5f 	bl	8006dc6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fc79 	bl	8006800 <USBD_CtlSendStatus>
              }
              break;
 8005f0e:	e004      	b.n	8005f1a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fbca 	bl	80066ac <USBD_CtlError>
              break;
 8005f18:	e000      	b.n	8005f1c <USBD_StdEPReq+0x14c>
              break;
 8005f1a:	bf00      	nop
          }
          break;
 8005f1c:	e0aa      	b.n	8006074 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d002      	beq.n	8005f2e <USBD_StdEPReq+0x15e>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d032      	beq.n	8005f92 <USBD_StdEPReq+0x1c2>
 8005f2c:	e097      	b.n	800605e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <USBD_StdEPReq+0x174>
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d004      	beq.n	8005f44 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fbb5 	bl	80066ac <USBD_CtlError>
                break;
 8005f42:	e091      	b.n	8006068 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da0b      	bge.n	8005f64 <USBD_StdEPReq+0x194>
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3310      	adds	r3, #16
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	e00b      	b.n	8005f7c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2202      	movs	r2, #2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fbf8 	bl	8006780 <USBD_CtlSendData>
              break;
 8005f90:	e06a      	b.n	8006068 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da11      	bge.n	8005fbe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	f003 020f 	and.w	r2, r3, #15
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3318      	adds	r3, #24
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d117      	bne.n	8005fe4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb78 	bl	80066ac <USBD_CtlError>
                  break;
 8005fbc:	e054      	b.n	8006068 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb65 	bl	80066ac <USBD_CtlError>
                  break;
 8005fe2:	e041      	b.n	8006068 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da0b      	bge.n	8006004 <USBD_StdEPReq+0x234>
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	e00b      	b.n	800601c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	3304      	adds	r3, #4
 800601c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <USBD_StdEPReq+0x25a>
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d103      	bne.n	8006032 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e00e      	b.n	8006050 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fee4 	bl	8006e04 <USBD_LL_IsStallEP>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	e002      	b.n	8006050 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2202      	movs	r2, #2
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fb92 	bl	8006780 <USBD_CtlSendData>
              break;
 800605c:	e004      	b.n	8006068 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fb23 	bl	80066ac <USBD_CtlError>
              break;
 8006066:	bf00      	nop
          }
          break;
 8006068:	e004      	b.n	8006074 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb1d 	bl	80066ac <USBD_CtlError>
          break;
 8006072:	bf00      	nop
      }
      break;
 8006074:	e004      	b.n	8006080 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb17 	bl	80066ac <USBD_CtlError>
      break;
 800607e:	bf00      	nop
  }

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	f200 8128 	bhi.w	8006302 <USBD_GetDescriptor+0x276>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <USBD_GetDescriptor+0x2c>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	08006303 	.word	0x08006303
 80060c8:	08006303 	.word	0x08006303
 80060cc:	080062a3 	.word	0x080062a3
 80060d0:	080062cf 	.word	0x080062cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	7c12      	ldrb	r2, [r2, #16]
 80060e0:	f107 0108 	add.w	r1, r7, #8
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
 80060e8:	60f8      	str	r0, [r7, #12]
      break;
 80060ea:	e112      	b.n	8006312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	7c1b      	ldrb	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10d      	bne.n	8006110 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f107 0208 	add.w	r2, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	2202      	movs	r2, #2
 800610c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800610e:	e100      	b.n	8006312 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	f107 0208 	add.w	r2, r7, #8
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	2202      	movs	r2, #2
 8006128:	701a      	strb	r2, [r3, #0]
      break;
 800612a:	e0f2      	b.n	8006312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	885b      	ldrh	r3, [r3, #2]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b05      	cmp	r3, #5
 8006134:	f200 80ac 	bhi.w	8006290 <USBD_GetDescriptor+0x204>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <USBD_GetDescriptor+0xb4>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006159 	.word	0x08006159
 8006144:	0800618d 	.word	0x0800618d
 8006148:	080061c1 	.word	0x080061c1
 800614c:	080061f5 	.word	0x080061f5
 8006150:	08006229 	.word	0x08006229
 8006154:	0800625d 	.word	0x0800625d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	7c12      	ldrb	r2, [r2, #16]
 8006170:	f107 0108 	add.w	r1, r7, #8
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
 8006178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800617a:	e091      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa94 	bl	80066ac <USBD_CtlError>
            err++;
 8006184:	7afb      	ldrb	r3, [r7, #11]
 8006186:	3301      	adds	r3, #1
 8006188:	72fb      	strb	r3, [r7, #11]
          break;
 800618a:	e089      	b.n	80062a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	7c12      	ldrb	r2, [r2, #16]
 80061a4:	f107 0108 	add.w	r1, r7, #8
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
 80061ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ae:	e077      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa7a 	bl	80066ac <USBD_CtlError>
            err++;
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	3301      	adds	r3, #1
 80061bc:	72fb      	strb	r3, [r7, #11]
          break;
 80061be:	e06f      	b.n	80062a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	7c12      	ldrb	r2, [r2, #16]
 80061d8:	f107 0108 	add.w	r1, r7, #8
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
 80061e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061e2:	e05d      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa60 	bl	80066ac <USBD_CtlError>
            err++;
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	3301      	adds	r3, #1
 80061f0:	72fb      	strb	r3, [r7, #11]
          break;
 80061f2:	e055      	b.n	80062a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	7c12      	ldrb	r2, [r2, #16]
 800620c:	f107 0108 	add.w	r1, r7, #8
 8006210:	4610      	mov	r0, r2
 8006212:	4798      	blx	r3
 8006214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006216:	e043      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa46 	bl	80066ac <USBD_CtlError>
            err++;
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	3301      	adds	r3, #1
 8006224:	72fb      	strb	r3, [r7, #11]
          break;
 8006226:	e03b      	b.n	80062a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624a:	e029      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa2c 	bl	80066ac <USBD_CtlError>
            err++;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	3301      	adds	r3, #1
 8006258:	72fb      	strb	r3, [r7, #11]
          break;
 800625a:	e021      	b.n	80062a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7c12      	ldrb	r2, [r2, #16]
 8006274:	f107 0108 	add.w	r1, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800627e:	e00f      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa12 	bl	80066ac <USBD_CtlError>
            err++;
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	3301      	adds	r3, #1
 800628c:	72fb      	strb	r3, [r7, #11]
          break;
 800628e:	e007      	b.n	80062a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa0a 	bl	80066ac <USBD_CtlError>
          err++;
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	3301      	adds	r3, #1
 800629c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800629e:	e038      	b.n	8006312 <USBD_GetDescriptor+0x286>
 80062a0:	e037      	b.n	8006312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7c1b      	ldrb	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f107 0208 	add.w	r2, r7, #8
 80062b6:	4610      	mov	r0, r2
 80062b8:	4798      	blx	r3
 80062ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062bc:	e029      	b.n	8006312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9f3 	bl	80066ac <USBD_CtlError>
        err++;
 80062c6:	7afb      	ldrb	r3, [r7, #11]
 80062c8:	3301      	adds	r3, #1
 80062ca:	72fb      	strb	r3, [r7, #11]
      break;
 80062cc:	e021      	b.n	8006312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7c1b      	ldrb	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10d      	bne.n	80062f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	f107 0208 	add.w	r2, r7, #8
 80062e2:	4610      	mov	r0, r2
 80062e4:	4798      	blx	r3
 80062e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	2207      	movs	r2, #7
 80062ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062f0:	e00f      	b.n	8006312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9d9 	bl	80066ac <USBD_CtlError>
        err++;
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	3301      	adds	r3, #1
 80062fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006300:	e007      	b.n	8006312 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f9d1 	bl	80066ac <USBD_CtlError>
      err++;
 800630a:	7afb      	ldrb	r3, [r7, #11]
 800630c:	3301      	adds	r3, #1
 800630e:	72fb      	strb	r3, [r7, #11]
      break;
 8006310:	bf00      	nop
  }

  if (err != 0U)
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d11c      	bne.n	8006352 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <USBD_GetDescriptor+0x2b6>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	88da      	ldrh	r2, [r3, #6]
 800632a:	893b      	ldrh	r3, [r7, #8]
 800632c:	4293      	cmp	r3, r2
 800632e:	bf28      	it	cs
 8006330:	4613      	movcs	r3, r2
 8006332:	b29b      	uxth	r3, r3
 8006334:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006336:	893b      	ldrh	r3, [r7, #8]
 8006338:	461a      	mov	r2, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fa1f 	bl	8006780 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	88db      	ldrh	r3, [r3, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa58 	bl	8006800 <USBD_CtlSendStatus>
 8006350:	e000      	b.n	8006354 <USBD_GetDescriptor+0x2c8>
    return;
 8006352:	bf00      	nop
    }
  }
}
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	889b      	ldrh	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d130      	bne.n	80063d0 <USBD_SetAddress+0x74>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88db      	ldrh	r3, [r3, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d12c      	bne.n	80063d0 <USBD_SetAddress+0x74>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	2b7f      	cmp	r3, #127	; 0x7f
 800637c:	d828      	bhi.n	80063d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006390:	2b03      	cmp	r3, #3
 8006392:	d104      	bne.n	800639e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f988 	bl	80066ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639c:	e01c      	b.n	80063d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fd56 	bl	8006e5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa25 	bl	8006800 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c4:	e008      	b.n	80063d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	e003      	b.n	80063d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f96a 	bl	80066ac <USBD_CtlError>
  }
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b41      	ldr	r3, [pc, #260]	; (80064f8 <USBD_SetConfig+0x118>)
 80063f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063f4:	4b40      	ldr	r3, [pc, #256]	; (80064f8 <USBD_SetConfig+0x118>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d904      	bls.n	8006406 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f954 	bl	80066ac <USBD_CtlError>
 8006404:	e075      	b.n	80064f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	2b02      	cmp	r3, #2
 800640e:	d002      	beq.n	8006416 <USBD_SetConfig+0x36>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d023      	beq.n	800645c <USBD_SetConfig+0x7c>
 8006414:	e062      	b.n	80064dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006416:	4b38      	ldr	r3, [pc, #224]	; (80064f8 <USBD_SetConfig+0x118>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01a      	beq.n	8006454 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800641e:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <USBD_SetConfig+0x118>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2203      	movs	r2, #3
 800642c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006430:	4b31      	ldr	r3, [pc, #196]	; (80064f8 <USBD_SetConfig+0x118>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff f9f4 	bl	8005824 <USBD_SetClassConfig>
 800643c:	4603      	mov	r3, r0
 800643e:	2b02      	cmp	r3, #2
 8006440:	d104      	bne.n	800644c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f931 	bl	80066ac <USBD_CtlError>
            return;
 800644a:	e052      	b.n	80064f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9d7 	bl	8006800 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006452:	e04e      	b.n	80064f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9d3 	bl	8006800 <USBD_CtlSendStatus>
        break;
 800645a:	e04a      	b.n	80064f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800645c:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <USBD_SetConfig+0x118>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d112      	bne.n	800648a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800646c:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <USBD_SetConfig+0x118>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <USBD_SetConfig+0x118>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f9f0 	bl	8005862 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9bc 	bl	8006800 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006488:	e033      	b.n	80064f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <USBD_SetConfig+0x118>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d01d      	beq.n	80064d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff f9de 	bl	8005862 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <USBD_SetConfig+0x118>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064b0:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <USBD_SetConfig+0x118>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff f9b4 	bl	8005824 <USBD_SetClassConfig>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d104      	bne.n	80064cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8f1 	bl	80066ac <USBD_CtlError>
            return;
 80064ca:	e012      	b.n	80064f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f997 	bl	8006800 <USBD_CtlSendStatus>
        break;
 80064d2:	e00e      	b.n	80064f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f993 	bl	8006800 <USBD_CtlSendStatus>
        break;
 80064da:	e00a      	b.n	80064f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8e4 	bl	80066ac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <USBD_SetConfig+0x118>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff f9b9 	bl	8005862 <USBD_ClrClassConfig>
        break;
 80064f0:	bf00      	nop
    }
  }
}
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	2000017c 	.word	0x2000017c

080064fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	88db      	ldrh	r3, [r3, #6]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d004      	beq.n	8006518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8cb 	bl	80066ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006516:	e021      	b.n	800655c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	2b01      	cmp	r3, #1
 8006520:	db17      	blt.n	8006552 <USBD_GetConfig+0x56>
 8006522:	2b02      	cmp	r3, #2
 8006524:	dd02      	ble.n	800652c <USBD_GetConfig+0x30>
 8006526:	2b03      	cmp	r3, #3
 8006528:	d00b      	beq.n	8006542 <USBD_GetConfig+0x46>
 800652a:	e012      	b.n	8006552 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3308      	adds	r3, #8
 8006536:	2201      	movs	r2, #1
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f920 	bl	8006780 <USBD_CtlSendData>
        break;
 8006540:	e00c      	b.n	800655c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	2201      	movs	r2, #1
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f918 	bl	8006780 <USBD_CtlSendData>
        break;
 8006550:	e004      	b.n	800655c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8a9 	bl	80066ac <USBD_CtlError>
        break;
 800655a:	bf00      	nop
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	3b01      	subs	r3, #1
 8006576:	2b02      	cmp	r3, #2
 8006578:	d81e      	bhi.n	80065b8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	88db      	ldrh	r3, [r3, #6]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d004      	beq.n	800658c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f891 	bl	80066ac <USBD_CtlError>
        break;
 800658a:	e01a      	b.n	80065c2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f043 0202 	orr.w	r2, r3, #2
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	330c      	adds	r3, #12
 80065ac:	2202      	movs	r2, #2
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8e5 	bl	8006780 <USBD_CtlSendData>
      break;
 80065b6:	e004      	b.n	80065c2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f876 	bl	80066ac <USBD_CtlError>
      break;
 80065c0:	bf00      	nop
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	885b      	ldrh	r3, [r3, #2]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d106      	bne.n	80065ea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f90b 	bl	8006800 <USBD_CtlSendStatus>
  }
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	3b01      	subs	r3, #1
 8006604:	2b02      	cmp	r3, #2
 8006606:	d80b      	bhi.n	8006620 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10c      	bne.n	800662a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8f1 	bl	8006800 <USBD_CtlSendStatus>
      }
      break;
 800661e:	e004      	b.n	800662a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f842 	bl	80066ac <USBD_CtlError>
      break;
 8006628:	e000      	b.n	800662c <USBD_ClrFeature+0x3a>
      break;
 800662a:	bf00      	nop
  }
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	785a      	ldrb	r2, [r3, #1]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	3302      	adds	r3, #2
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3303      	adds	r3, #3
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	4413      	add	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b29a      	uxth	r2, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	3305      	adds	r3, #5
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	b29b      	uxth	r3, r3
 800667e:	4413      	add	r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	3306      	adds	r3, #6
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b29a      	uxth	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	3307      	adds	r3, #7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	b29b      	uxth	r3, r3
 800669a:	4413      	add	r3, r2
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	80da      	strh	r2, [r3, #6]

}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr

080066ac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fb65 	bl	8006d88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80066be:	2100      	movs	r1, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb61 	bl	8006d88 <USBD_LL_StallEP>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d032      	beq.n	800674a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f834 	bl	8006752 <USBD_GetLen>
 80066ea:	4603      	mov	r3, r0
 80066ec:	3301      	adds	r3, #1
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	75fa      	strb	r2, [r7, #23]
 80066fe:	461a      	mov	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4413      	add	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	75fa      	strb	r2, [r7, #23]
 8006710:	461a      	mov	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	2203      	movs	r2, #3
 8006718:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800671a:	e012      	b.n	8006742 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	60fa      	str	r2, [r7, #12]
 8006722:	7dfa      	ldrb	r2, [r7, #23]
 8006724:	1c51      	adds	r1, r2, #1
 8006726:	75f9      	strb	r1, [r7, #23]
 8006728:	4611      	mov	r1, r2
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	440a      	add	r2, r1
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	75fa      	strb	r2, [r7, #23]
 8006738:	461a      	mov	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4413      	add	r3, r2
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e8      	bne.n	800671c <USBD_GetString+0x4e>
    }
  }
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800675e:	e005      	b.n	800676c <USBD_GetLen+0x1a>
  {
    len++;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	3301      	adds	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3301      	adds	r3, #1
 800676a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f5      	bne.n	8006760 <USBD_GetLen+0xe>
  }

  return len;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2202      	movs	r2, #2
 8006792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800679c:	88fa      	ldrh	r2, [r7, #6]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	2100      	movs	r1, #0
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fb76 	bl	8006e9a <USBD_LL_Transmit>

  return USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	2100      	movs	r1, #0
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fb64 	bl	8006e9a <USBD_LL_Transmit>

  return USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	2100      	movs	r1, #0
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fb75 	bl	8006ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2204      	movs	r2, #4
 800680c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fb3f 	bl	8006e9a <USBD_LL_Transmit>

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2205      	movs	r2, #5
 8006832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006836:	2300      	movs	r3, #0
 8006838:	2200      	movs	r2, #0
 800683a:	2100      	movs	r1, #0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb4f 	bl	8006ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006850:	2200      	movs	r2, #0
 8006852:	490e      	ldr	r1, [pc, #56]	; (800688c <MX_USB_DEVICE_Init+0x40>)
 8006854:	480e      	ldr	r0, [pc, #56]	; (8006890 <MX_USB_DEVICE_Init+0x44>)
 8006856:	f7fe ff8b 	bl	8005770 <USBD_Init>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006860:	f7f9 fe48 	bl	80004f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006864:	490b      	ldr	r1, [pc, #44]	; (8006894 <MX_USB_DEVICE_Init+0x48>)
 8006866:	480a      	ldr	r0, [pc, #40]	; (8006890 <MX_USB_DEVICE_Init+0x44>)
 8006868:	f7fe ffad 	bl	80057c6 <USBD_RegisterClass>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006872:	f7f9 fe3f 	bl	80004f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006876:	4806      	ldr	r0, [pc, #24]	; (8006890 <MX_USB_DEVICE_Init+0x44>)
 8006878:	f7fe ffbe 	bl	80057f8 <USBD_Start>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006882:	f7f9 fe37 	bl	80004f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000108 	.word	0x20000108
 8006890:	20000198 	.word	0x20000198
 8006894:	2000000c 	.word	0x2000000c

08006898 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2212      	movs	r2, #18
 80068a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000124 	.word	0x20000124

080068bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2204      	movs	r2, #4
 80068cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068ce:	4b03      	ldr	r3, [pc, #12]	; (80068dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000138 	.word	0x20000138

080068e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4907      	ldr	r1, [pc, #28]	; (8006914 <USBD_FS_ProductStrDescriptor+0x34>)
 80068f6:	4808      	ldr	r0, [pc, #32]	; (8006918 <USBD_FS_ProductStrDescriptor+0x38>)
 80068f8:	f7ff fee9 	bl	80066ce <USBD_GetString>
 80068fc:	e004      	b.n	8006908 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <USBD_FS_ProductStrDescriptor+0x34>)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <USBD_FS_ProductStrDescriptor+0x38>)
 8006904:	f7ff fee3 	bl	80066ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2000045c 	.word	0x2000045c
 8006918:	08007044 	.word	0x08007044

0800691c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	4904      	ldr	r1, [pc, #16]	; (800693c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800692c:	4804      	ldr	r0, [pc, #16]	; (8006940 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800692e:	f7ff fece 	bl	80066ce <USBD_GetString>
  return USBD_StrDesc;
 8006932:	4b02      	ldr	r3, [pc, #8]	; (800693c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	2000045c 	.word	0x2000045c
 8006940:	0800705c 	.word	0x0800705c

08006944 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	221a      	movs	r2, #26
 8006954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006956:	f000 f843 	bl	80069e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800695a:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	2000013c 	.word	0x2000013c

08006968 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	4907      	ldr	r1, [pc, #28]	; (800699c <USBD_FS_ConfigStrDescriptor+0x34>)
 800697e:	4808      	ldr	r0, [pc, #32]	; (80069a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006980:	f7ff fea5 	bl	80066ce <USBD_GetString>
 8006984:	e004      	b.n	8006990 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	4904      	ldr	r1, [pc, #16]	; (800699c <USBD_FS_ConfigStrDescriptor+0x34>)
 800698a:	4805      	ldr	r0, [pc, #20]	; (80069a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800698c:	f7ff fe9f 	bl	80066ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	2000045c 	.word	0x2000045c
 80069a0:	08007070 	.word	0x08007070

080069a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4907      	ldr	r1, [pc, #28]	; (80069d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069ba:	4808      	ldr	r0, [pc, #32]	; (80069dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069bc:	f7ff fe87 	bl	80066ce <USBD_GetString>
 80069c0:	e004      	b.n	80069cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	4904      	ldr	r1, [pc, #16]	; (80069d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069c8:	f7ff fe81 	bl	80066ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	2000045c 	.word	0x2000045c
 80069dc:	0800707c 	.word	0x0800707c

080069e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069e6:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <Get_SerialNum+0x44>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <Get_SerialNum+0x48>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <Get_SerialNum+0x4c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a06:	2208      	movs	r2, #8
 8006a08:	4909      	ldr	r1, [pc, #36]	; (8006a30 <Get_SerialNum+0x50>)
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f814 	bl	8006a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a10:	2204      	movs	r2, #4
 8006a12:	4908      	ldr	r1, [pc, #32]	; (8006a34 <Get_SerialNum+0x54>)
 8006a14:	68b8      	ldr	r0, [r7, #8]
 8006a16:	f000 f80f 	bl	8006a38 <IntToUnicode>
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	1ffff7e8 	.word	0x1ffff7e8
 8006a28:	1ffff7ec 	.word	0x1ffff7ec
 8006a2c:	1ffff7f0 	.word	0x1ffff7f0
 8006a30:	2000013e 	.word	0x2000013e
 8006a34:	2000014e 	.word	0x2000014e

08006a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75fb      	strb	r3, [r7, #23]
 8006a4e:	e027      	b.n	8006aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	0f1b      	lsrs	r3, r3, #28
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d80b      	bhi.n	8006a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	0f1b      	lsrs	r3, r3, #28
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4619      	mov	r1, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	440b      	add	r3, r1
 8006a68:	3230      	adds	r2, #48	; 0x30
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e00a      	b.n	8006a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	0f1b      	lsrs	r3, r3, #28
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	440b      	add	r3, r1
 8006a80:	3237      	adds	r2, #55	; 0x37
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	3301      	adds	r3, #1
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	75fb      	strb	r3, [r7, #23]
 8006aa0:	7dfa      	ldrb	r2, [r7, #23]
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d3d3      	bcc.n	8006a50 <IntToUnicode+0x18>
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
	...

08006ab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <HAL_PCD_MspInit+0x44>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d113      	bne.n	8006aee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <HAL_PCD_MspInit+0x48>)
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <HAL_PCD_MspInit+0x48>)
 8006acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ad0:	61d3      	str	r3, [r2, #28]
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <HAL_PCD_MspInit+0x48>)
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2014      	movs	r0, #20
 8006ae4:	f7f9 fef5 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006ae8:	2014      	movs	r0, #20
 8006aea:	f7f9 ff0e 	bl	800090a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40005c00 	.word	0x40005c00
 8006afc:	40021000 	.word	0x40021000

08006b00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe feb6 	bl	8005888 <USBD_LL_SetupStage>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	440b      	add	r3, r1
 8006b44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f7fe fee6 	bl	800591e <USBD_LL_DataOutStage>
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	440b      	add	r3, r1
 8006b7a:	333c      	adds	r3, #60	; 0x3c
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7fe ff3d 	bl	8005a00 <USBD_LL_DataInStage>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff f84d 	bl	8005c3c <USBD_LL_SOF>
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d001      	beq.n	8006bc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bbe:	f7f9 fc99 	bl	80004f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006bc8:	7bfa      	ldrb	r2, [r7, #15]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fffd 	bl	8005bcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe ffb6 	bl	8005b4a <USBD_LL_Reset>
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fff7 	bl	8005bea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <HAL_PCD_SuspendCallback+0x30>)
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	4a03      	ldr	r2, [pc, #12]	; (8006c18 <HAL_PCD_SuspendCallback+0x30>)
 8006c0a:	f043 0306 	orr.w	r3, r3, #6
 8006c0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed00 	.word	0xe000ed00

08006c1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fff1 	bl	8005c12 <USBD_LL_Resume>
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006c40:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006c50:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c52:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <USBD_LL_Init+0x8c>)
 8006c54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c58:	2208      	movs	r2, #8
 8006c5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006c5c:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c5e:	2202      	movs	r2, #2
 8006c60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006c68:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006c74:	4812      	ldr	r0, [pc, #72]	; (8006cc0 <USBD_LL_Init+0x88>)
 8006c76:	f7f9 ffec 	bl	8000c52 <HAL_PCD_Init>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006c80:	f7f9 fc38 	bl	80004f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c8a:	2318      	movs	r3, #24
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	f7fb fc48 	bl	8002524 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c9a:	2358      	movs	r3, #88	; 0x58
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	f7fb fc40 	bl	8002524 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2181      	movs	r1, #129	; 0x81
 8006cb2:	f7fb fc37 	bl	8002524 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	2000065c 	.word	0x2000065c
 8006cc4:	40005c00 	.word	0x40005c00

08006cc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fa f8c2 	bl	8000e68 <HAL_PCD_Start>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f93c 	bl	8006f68 <USBD_Get_USB_Status>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	70fb      	strb	r3, [r7, #3]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70bb      	strb	r3, [r7, #2]
 8006d14:	4613      	mov	r3, r2
 8006d16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d26:	78bb      	ldrb	r3, [r7, #2]
 8006d28:	883a      	ldrh	r2, [r7, #0]
 8006d2a:	78f9      	ldrb	r1, [r7, #3]
 8006d2c:	f7fa fa3c 	bl	80011a8 <HAL_PCD_EP_Open>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f916 	bl	8006f68 <USBD_Get_USB_Status>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fa fa83 	bl	8001274 <HAL_PCD_EP_Close>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 f8f7 	bl	8006f68 <USBD_Get_USB_Status>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fa fb2c 	bl	8001404 <HAL_PCD_EP_SetStall>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f8d8 	bl	8006f68 <USBD_Get_USB_Status>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fa fb6d 	bl	80014c4 <HAL_PCD_EP_ClrStall>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f8b9 	bl	8006f68 <USBD_Get_USB_Status>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da0c      	bge.n	8006e3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	3302      	adds	r3, #2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	e00b      	b.n	8006e52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e40:	68f9      	ldr	r1, [r7, #12]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	440b      	add	r3, r1
 8006e4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006e50:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fa f96f 	bl	800115e <HAL_PCD_SetAddress>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f86e 	bl	8006f68 <USBD_Get_USB_Status>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	72fb      	strb	r3, [r7, #11]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ebc:	893b      	ldrh	r3, [r7, #8]
 8006ebe:	7af9      	ldrb	r1, [r7, #11]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	f7fa fa5c 	bl	800137e <HAL_PCD_EP_Transmit>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f84b 	bl	8006f68 <USBD_Get_USB_Status>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ed6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	461a      	mov	r2, r3
 8006eec:	460b      	mov	r3, r1
 8006eee:	72fb      	strb	r3, [r7, #11]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f02:	893b      	ldrh	r3, [r7, #8]
 8006f04:	7af9      	ldrb	r1, [r7, #11]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	f7fa f9fc 	bl	8001304 <HAL_PCD_EP_Receive>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f828 	bl	8006f68 <USBD_Get_USB_Status>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <USBD_static_malloc+0x14>)
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	20000180 	.word	0x20000180

08006f40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d817      	bhi.n	8006fac <USBD_Get_USB_Status+0x44>
 8006f7c:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <USBD_Get_USB_Status+0x1c>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006f9b 	.word	0x08006f9b
 8006f8c:	08006fa1 	.word	0x08006fa1
 8006f90:	08006fa7 	.word	0x08006fa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]
    break;
 8006f98:	e00b      	b.n	8006fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9e:	e008      	b.n	8006fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa4:	e005      	b.n	8006fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8006faa:	e002      	b.n	8006fb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb0:	bf00      	nop
  }
  return usb_status;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	4e0c      	ldr	r6, [pc, #48]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc6:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc8:	1ba4      	subs	r4, r4, r6
 8006fca:	10a4      	asrs	r4, r4, #2
 8006fcc:	42a5      	cmp	r5, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	f000 f822 	bl	8007018 <_init>
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	4e0a      	ldr	r6, [pc, #40]	; (8007000 <__libc_init_array+0x40>)
 8006fd8:	4c0a      	ldr	r4, [pc, #40]	; (8007004 <__libc_init_array+0x44>)
 8006fda:	1ba4      	subs	r4, r4, r6
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	42a5      	cmp	r5, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fe8:	4798      	blx	r3
 8006fea:	3501      	adds	r5, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ff2:	4798      	blx	r3
 8006ff4:	3501      	adds	r5, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	0800709c 	.word	0x0800709c
 8006ffc:	0800709c 	.word	0x0800709c
 8007000:	0800709c 	.word	0x0800709c
 8007004:	080070a0 	.word	0x080070a0

08007008 <memset>:
 8007008:	4603      	mov	r3, r0
 800700a:	4402      	add	r2, r0
 800700c:	4293      	cmp	r3, r2
 800700e:	d100      	bne.n	8007012 <memset+0xa>
 8007010:	4770      	bx	lr
 8007012:	f803 1b01 	strb.w	r1, [r3], #1
 8007016:	e7f9      	b.n	800700c <memset+0x4>

08007018 <_init>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	bf00      	nop
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr

08007024 <_fini>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr
